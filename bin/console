#!/usr/bin/env php
<?php
set_time_limit(0);

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\RouteCollection;
use Symfony\Component\Console\Application;

require_once __DIR__.'/../app/autoload.php';

// Load the available route collection
$routes = new \Symfony\Component\Routing\RouteCollection();

// Create the request object
$request = Request::createFromGlobals();
$request->setTrustedProxies(array('127.0.0.1'));

require __DIR__.'/../app/container.php';
require __DIR__.'/../config/config.inc.php';

// Init event dispatchers
$dispatcher = $sc->get('event_dispatcher');
$eventListenersPath = SRC_PATH.'Framework/EventListeners';
if (is_dir($eventListenersPath)) {
    $listenerClasses = glob($eventListenersPath.'/*.php');
    foreach ($listenerClasses as $className) {
        require_once $className;
        $eventListenerClassName = 'Framework\\EventListeners\\'.basename($className, '.php');

        $listenerInstance = new $eventListenerClassName;

        $dispatcher->addSubscriber($listenerInstance);
    }
}

$application = new Application();

// Iterate over all the available command classes and register them into the
// console application
// $basePath = APPLICATION_PATH.'/app/';
$availableCommandClases = glob(SRC_PATH.'*/Command/*');
foreach ($availableCommandClases as $file) {
    $commandClass = str_replace(
        array(SRC_PATH, '.php', '/'),
        array('', '', '\\'),
        $file
    );

    if (class_exists($commandClass)) {
        $application->add(new $commandClass);
    }
}
$application->run();
