<?php
/**
 * This file is part of the Onm package.
 *
 * (c)  OpenHost S.L. <developers@openhost.es>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
/**
 * This file stores shared function that could be used by the framework
 */

function underscore($name)
{
    return strtolower(preg_replace('/(?<=\\w)([A-Z])/', '_\\1', $name));
}

function classify($name)
{
    $parts = explode('_', $name);
    $parts = array_map(
        function ($token) {
            return ucfirst($token);
        },
        $parts
    );

    $className = implode('', $parts);

    return $className;
}

function tableize($name)
{
    return pluralize(underscore($name));
}

function pluralize($name)
{
    return strtolower($name) . 's';
}

function clearslash($string)
{
    $string = stripslashes($string);
    $string = str_replace("\\", '', $string);

    return stripslashes($string);
}

/**
 * Register in the log one event in the content
 *
 * @return void
 */
function logContentEvent($action = null, $content = null)
{
    $logger = getService('application.log');
    $msg    = "Action {$action} executed";

    if (!empty($content)) {
        $msg .= " at " . get_class($content) . " (ID:{$content->id})";
    }

    $logger->info($msg);
}

/**
 * Returns the autogenerated url given its name and a set of parameters
 *
 * @param string   $urlName the name of the url, i.e. admin_sytem_settings
 * @param array    $params additional params to generate the url
 * @param boolean  $absolute whether generate an absolute url
 *
 * @return string  the url
 */
function url($urlName, $params = [], $absolute = false)
{
    if ($absolute) {
        $absolute = Symfony\Component\Routing\Generator\UrlGeneratorInterface::ABSOLUTE_URL;
    } else {
        $absolute = Symfony\Component\Routing\Generator\UrlGeneratorInterface::ABSOLUTE_PATH;
    }

    global $kernel;
    return $kernel->getContainer()->get('router')->generate($urlName, $params, $absolute);
}

/**
 * Try to get the real IP of the client
 *
 * @return string the client ip
 */
function getUserRealIP()
{
    // REMOTE_ADDR: dirección ip del cliente
    // HTTP_X_FORWARDED_FOR: si no está vacío indica que se ha utilizado
    // un proxy. Al pasar por el proxy lo que hace este es poner su
    // dirección IP como REMOTE_ADDR y añadir la que estaba como
    // REMOTE_ADDR al final de esta cabecera.
    // En el caso de que la petición pase por varios proxys cada uno
    // repite la operación, por lo que tendremos una lista de direcciones
    // IP que partiendo del REMOTE_ADDR original irá indicando los proxys
    // por los que ha pasado.

    if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])
        && $_SERVER['HTTP_X_FORWARDED_FOR'] != ''
    ) {
        $clientIp = ( !empty($_SERVER['REMOTE_ADDR']) ) ?
            $_SERVER['REMOTE_ADDR']
            :
            ( ( !empty($_ENV['REMOTE_ADDR']) ) ?
                $_ENV['REMOTE_ADDR']
                :
                "unknown" );

        // los proxys van añadiendo al final de esta cabecera
        // las direcciones ip que van "ocultando". Para localizar la ip real
        // del usuario se comienza a mirar por el principio hasta encontrar
        // una dirección ip que no sea del rango privado. En caso de no
        // encontrarse ninguna se toma como valor el REMOTE_ADDR

        $entries = preg_split('@[, ]@', $_SERVER['HTTP_X_FORWARDED_FOR']);


        foreach ($entries as $entry) {
            $entry = trim($entry);

            // http://www.faqs.org/rfcs/rfc1918.html
            if (preg_match("/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/", $entry, $ipList)) {
                $privateIp = [
                    '/^0\./',
                    '/^127\.0\.0\.1/',
                    '/^192\.168\..*/',
                    '/^172\.((1[6-9])|(2[0-9])|(3[0-1]))\..*/',
                    '/^10\..*/'
                ];

                $foundIP = preg_replace($privateIp, $clientIp, $ipList[1]);

                if ($clientIp != $foundIP) {
                    $clientIp = $foundIP;
                    break;
                }
            }
        }
    } else {
        $clientIp = ( !empty($_SERVER['REMOTE_ADDR']) ) ?
            $_SERVER['REMOTE_ADDR']
            :
            ( ( !empty($_ENV['REMOTE_ADDR']) ) ?
                $_ENV['REMOTE_ADDR']
                :
                "unknown" );
    }

    return $clientIp;
}

function getService($serviceName)
{
    global $kernel;
    return $kernel->getContainer()->get($serviceName);
}

/**
 * Prepares HTML code to use it as html entity attribute
 *
 * @param string $string the string to clean
 *
 * @return string $string the cleaned string
 */
function html_attribute($string)
{
    return \Onm\StringUtils::htmlAttribute($string);
}

/**
 * undocumented function
 *
 * @return void
 * @author
 */
function dispatchEventWithParams($eventName, $params = [])
{
    if (php_sapi_name() == 'cli') {
        return;
    }

    $event           = new \Symfony\Component\EventDispatcher\GenericEvent();
    $eventDispatcher = getService('event_dispatcher');
    foreach ($params as $paramName => $paramValue) {
        $event->setArgument($paramName, $paramValue);
    }

    $eventDispatcher->dispatch($eventName, $event);
}

function getPiwikCode($type = false)
{
    $config = getService('orm.manager')
        ->getDataSet('Settings', 'instance')
        ->get('piwik');

    if (!is_array($config)
        || !array_key_exists('page_id', $config)
        || empty(trim($config['page_id']))
    ) {
        return '';
    }

    $piwikConfig = getService('service_container')->getParameter('opennemas.piwik');

    $config['server_url'] = rtrim($piwikConfig['url'], DS) . DS;

    if ($type === 'amp') {
        $code = generatePiwikAmpCode($config);
    } elseif ($type === 'image') {
        $code = generatePiwikImageCode($config);
    } else {
        $code = generatePiwikScriptCode($config);
    }

    return $code;
}

function generatePiwikScriptCode($config)
{
    $code = '<!-- Piwik -->
        <script>
        var _paq = _paq || [];
        _paq.push([\'trackPageView\']);
        _paq.push([\'enableLinkTracking\']);
        (function() {
            var u = "' . $config['server_url'] . '";
            _paq.push([\'setTrackerUrl\', u+\'piwik.php\']);
            _paq.push([\'setSiteId\', ' . $config['page_id'] . ']);
            var d=document, g=d.createElement(\'script\'), s=d.getElementsByTagName(\'script\')[0];
            g.async=true; g.defer=true;
            g.src=u+\'piwik.js\'; s.parentNode.insertBefore(g,s);
        })();
        </script>
        <noscript>
            <img src="' . $config['server_url'] . 'piwik.php?idsite=' .
            $config['page_id'] . '" style="border:0" alt="" />
        </noscript>
        <!-- End Piwik Tracking Code -->';

    return $code;
}

function generatePiwikAmpCode($config)
{
    $imgCode = '<amp-pixel src="%spiwik.php?idsite=%d&amp;rec=1&amp;action_name=AMP" layout="nodisplay"></amp-pixel>';

    $code = sprintf(
        $imgCode,
        $config['server_url'],
        $config['page_id']
    );

    return $code;
}

function generatePiwikImageCode($config)
{
    $imgCode = '<img src="%spiwik.php?idsite=%d&amp;rec=1&amp;'
        . 'action_name=Newsletter&amp;url=%s" style="border:0; height:0; width:0" alt="" />';

    $code = sprintf(
        $imgCode,
        $config['server_url'],
        $config['page_id'],
        urlencode(SITE_URL . 'newsletter/' . date("YmdHis"))
    );

    return $code;
}

function getGoogleAnalyticsCode($params = [])
{
    $config = getService('orm.manager')
        ->getDataSet('Settings', 'instance')
        ->get('google_analytics');

    // Keep compatibility with old analytics store format
    if (is_array($config)
        && array_key_exists('api_key', $config)
    ) {
        $oldConfig = $config;
        $config    = [];
        $config[]  = $oldConfig;
    }

    if (!is_array($config)
        || !array_key_exists('0', $config)
        || !is_array($config[0])
        || !array_key_exists('api_key', $config[0])
        || empty(trim($config[0]['api_key']))
    ) {
        $config = [];
    }

    $type = (is_array($params) && array_key_exists('type', $params))
        ? $params['type'] : null;

    $config['category']  = (is_array($params) && array_key_exists('category', $params))
        ? $params['category'] : null;
    $config['extension'] = (is_array($params) && array_key_exists('extension', $params))
        ? $params['extension'] : null;

    if ($type === 'amp') {
        $code = generateGAAmpCode($config);
    } elseif ($type === 'image') {
        $code = generateGAImageCode($config);
    } else {
        $code = generateGAScriptCode($config);
    }

    return $code;
}

function generateGAScriptCode($config)
{
    $setAccount    = "_gaq.push(['%s_setAccount', '%s']);\n";
    $setDomainName = "_gaq.push(['%s_setDomainName', '%s']);\n";
    $setCustomVar  = "_gaq.push(['%s_setCustomVar', %d, '%s', '%s', %d]);\n";

    $prefix = '';
    $code   = "\n<script>\nvar _gaq = _gaq || [];\n";
    foreach ($config as $key => $account) {
        if (!is_array($account)
            || !array_key_exists('api_key', $account)
            || empty(trim($account['api_key']))
        ) {
            continue;
        }

        if ($key != 0) {
            $prefix = "account{$key}.";
        }

        $code .= sprintf($setAccount, $prefix, trim($account['api_key']));

        if (array_key_exists('base_domain', $account)
            && !empty(trim($account['base_domain']))
        ) {
            $code .= sprintf($setDomainName, $prefix, trim($account['base_domain']));
        }

        if (array_key_exists('custom_var', $account)
            && !empty(trim($account['custom_var']))
        ) {
            $code .= base64_decode(trim($account['custom_var'])) . "\n";
        }

        // Category targeting
        if (array_key_exists('category', $account)
            && is_array($account['category'])
            && array_key_exists('index', $account['category'])
            && !empty($account['category']['index'])
        ) {
            $code .= sprintf(
                $setCustomVar,
                $prefix,
                $account['category']['index'],
                $account['category']['key'],
                $config['category'],
                $account['category']['scope']
            );
        }

        // Extension tageting
        if (array_key_exists('extension', $account)
            && is_array($account['extension'])
            && array_key_exists('index', $account['extension'])
            && !empty($account['extension']['index'])
        ) {
            $code .= sprintf(
                $setCustomVar,
                $prefix,
                $account['extension']['index'],
                $account['extension']['key'],
                $config['extension'],
                $account['extension']['scope']
            );
        }

        $code .= sprintf("_gaq.push(['%s_trackPageview']);\n", $prefix);
    }

    // Add opennemas Account
    $code .= "_gaq.push(['onm._setAccount', 'UA-40838799-5']);\n";
    $code .= "_gaq.push(['onm._trackPageview']);\n";

    // Load ga.js script
    $code .= "(function() {\n"
        . "var ga = document.createElement('script'); ga.async = true;\n"
        . "ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://')"
        . " + 'stats.g.doubleclick.net/dc.js';\n"
        . "(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);\n"
        . "})();\n"
        . "</script>\n";

    return $code;
}

function generateGAImageCode($config)
{
    $imgCode = '<img src="http://www.google-analytics.com/__utm.gif?utmwv=4&utmn=%s&utmdt=Newsletter'
        . ' [%s]&utmhn=%s&utmr=%s&utmp=%s&utmac=%s&utmcc=%s" style="border:0" alt="" />' . "\n";

    $code = '';
    foreach ($config as $account) {
        if (is_array($account)
            && array_key_exists('api_key', $account)
            && !empty(trim($account['api_key']))
        ) {
            $code .= sprintf(
                $imgCode,
                rand(0, 0x7fffffff),
                date('d/m/Y'),
                urlencode(SITE_URL),
                urlencode(SITE_URL . 'newsletter/' . date("Ymd")),
                urlencode('newsletter/' . date("Ymd")),
                trim($account['api_key']),
                '__utma%3D999.999.999.999.999.1%3B'
            );
        }
    }

    // Add GA Image for onm UA tracking code
    $code .= sprintf(
        $imgCode,
        rand(0, 0x7fffffff),
        date('d/m/Y'),
        urlencode(SITE_URL),
        urlencode(SITE_URL . 'newsletter/' . date("Ymd")),
        urlencode('newsletter/' . date("Ymd")),
        trim('UA-40838799-5'),
        '__utma%3D999.999.999.999.999.1%3B'
    );

    return $code;
}

function generateGAAmpCode($config)
{
    $code = '';
    foreach ($config as $key => $account) {
        if (is_array($account)
            && array_key_exists('api_key', $account)
            && !empty(trim($account['api_key']))
        ) {
            $code .= '<amp-analytics type="googleanalytics" id="analytics' . $key . '">
<script type="application/json">
{
  "vars": {
    "account": "' . trim($account['api_key']) . '"
  },
  "triggers": {
    "trackPageview": {
      "on": "visible",
      "request": "pageview"
    }
  }
}
</script>
</amp-analytics>' . "\n";
        }
    }

    $code .= '<amp-analytics type="googleanalytics" id="analytics-onm">
<script type="application/json">
{
  "vars": {
    "account": "UA-40838799-5"
  },
  "triggers": {
    "trackPageview": {
      "on": "visible",
      "request": "pageview"
    }
  }
}
</script>
</amp-analytics>' . "\n";

    return $code;
}
