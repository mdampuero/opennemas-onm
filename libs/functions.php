<?php
/**
 * This file is part of the Onm package.
 *
 * (c)  OpenHost S.L. <developers@openhost.es>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 **/
/**
 * This file stores shared function that could be used by the framework
 */

function underscore($name)
{
    $withUnderscore = strtolower(preg_replace('/(?<=\\w)([A-Z])/', '_\\1', $name));

    return $withUnderscore;
}

function classify($name)
{
    $parts = explode('_', $name);

    $parts = array_map(
        function ($token) {
            return ucfirst($token);
        },
        $parts
    );
    $className = implode('', $parts);

    return $className;
}

function tableize($name)
{
    return pluralize(underscore($name));
}

function pluralize($name)
{
    $name = strtolower($name);
    return $name . 's';
}

function clearslash($string)
{
    $string = stripslashes($string);
    $string = str_replace("\\", '', $string);

    return stripslashes($string);
}

/**
 * Register in the log one event in the content
 *
 * @return void
 **/
function logContentEvent($action = null, $content = null)
{
    $logger = getService('application.log');

    $msg = 'User '.$_SESSION['username'].'(ID:'.$_SESSION['userid'].') has executed '
    .'the action '.$action;
    if (!empty($content)) {
        $msg.=' at '.get_class($content).' (ID:'.$content->id.')';
    }

    $logger->info($msg);
}

/**
 * Register in the log all user actions
 *
 * @return void
 **/
function logUserEvent($action = null, $id = null, $data = null)
{
    $logger = getService('application.log');

    $activatedUsers = \User::getTotalActivatedUsersRemaining(1, 1);

    if (!is_null(getService('security.token_storage')->getToken())) {
        $currentUser = getService('security.token_storage')->getToken()->getUser();

        $message =  'User '.$currentUser->username.'(ID:'.$currentUser->id.') '.
                    'exectuted action '.$action.': user ID '.$id;

        if (!is_null($data)) {
            $message .= ' - username ('.$data['username'].')'.
                        ' - user group ('.$data['id_user_group'].')'.
                        ' - activated flag ('.$data['activated'].')';
        }

        $message .= ' - total users activated ('.$activatedUsers.')';

        $logger->info($message);
    }
}

/**
 * Returns the autogenerated url given its name and a set of parameters
 *
 * @param string   $urlName the name of the url, i.e. admin_sytem_settings
 * @param array    $params additional params to generate the url
 * @param boolean  $absolute whether generate an absolute url
 *
 * @return string  the url
 **/
function url($urlName, $params = array(), $absolute = false)
{
    if ($absolute) {
        $absolute = Symfony\Component\Routing\Generator\UrlGeneratorInterface::ABSOLUTE_URL;
    } else {
        $absolute = Symfony\Component\Routing\Generator\UrlGeneratorInterface::ABSOLUTE_PATH;
    }

    global $kernel;
    return $kernel->getContainer()->get('router')->generate($urlName, $params, $absolute);
}

/**
* Perform a permanently redirection (301)
*
* Use the header PHP function to redirect browser to another page
*
* @param string $url the url to redirect to
*/
function forward301($url)
{
    header('HTTP/1.1 301 Moved Permanently');
    header('Location: ' . $url);
    exit(0);
}

/**
 * Try to get the real IP of the client
 *
 * @return string the client ip
 **/
function getUserRealIP()
{
    // REMOTE_ADDR: dirección ip del cliente
    // HTTP_X_FORWARDED_FOR: si no está vacío indica que se ha utilizado
    // un proxy. Al pasar por el proxy lo que hace este es poner su
    // dirección IP como REMOTE_ADDR y añadir la que estaba como
    // REMOTE_ADDR al final de esta cabecera.
    // En el caso de que la petición pase por varios proxys cada uno
    // repite la operación, por lo que tendremos una lista de direcciones
    // IP que partiendo del REMOTE_ADDR original irá indicando los proxys
    // por los que ha pasado.

    if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])
        && $_SERVER['HTTP_X_FORWARDED_FOR'] != ''
    ) {
        $clientIp = ( !empty($_SERVER['REMOTE_ADDR']) ) ?
            $_SERVER['REMOTE_ADDR']
            :
            ( ( !empty($_ENV['REMOTE_ADDR']) ) ?
                $_ENV['REMOTE_ADDR']
                :
                "unknown" );

        // los proxys van añadiendo al final de esta cabecera
        // las direcciones ip que van "ocultando". Para localizar la ip real
        // del usuario se comienza a mirar por el principio hasta encontrar
        // una dirección ip que no sea del rango privado. En caso de no
        // encontrarse ninguna se toma como valor el REMOTE_ADDR

        $entries = preg_split('@[, ]@', $_SERVER['HTTP_X_FORWARDED_FOR']);

        reset($entries);
        while (list(, $entry) = each($entries)) {
            $entry = trim($entry);
            if (preg_match("/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/", $entry, $ipList)) {
                // http://www.faqs.org/rfcs/rfc1918.html
                $privateIp = array(
                      '/^0\./',
                      '/^127\.0\.0\.1/',
                      '/^192\.168\..*/',
                      '/^172\.((1[6-9])|(2[0-9])|(3[0-1]))\..*/',
                      '/^10\..*/');

                $foundIP = preg_replace($privateIp, $clientIp, $ipList[1]);

                if ($clientIp != $foundIP) {
                    $clientIp = $foundIP;
                    break;
                }
            }
        }
    } else {
        $clientIp = ( !empty($_SERVER['REMOTE_ADDR']) ) ?
            $_SERVER['REMOTE_ADDR']
            :
            ( ( !empty($_ENV['REMOTE_ADDR']) ) ?
                $_ENV['REMOTE_ADDR']
                :
                "unknown" );
    }

    return $clientIp;
}

function getService($serviceName)
{
    global $kernel;
    return $kernel->getContainer()->get($serviceName);
}

function getContainerParameter($paramName)
{
    global $kernel;
    return $kernel->getContainer()->getParameter($paramName);
}

/**
 * Prepares HTML code to use it as html entity attribute
 *
 * @param string $string the string to clean
 *
 * @return string $string the cleaned string
 **/
function html_attribute($string)
{
    return \Onm\StringUtils::htmlAttribute($string);
}

// added Claudio Bustos  clbustos#entelchile.net
if (!defined('ADODB_ERROR_HANDLER_TYPE')) {
    define('ADODB_ERROR_HANDLER_TYPE', E_USER_ERROR);
}
if (!defined('ADODB_ERROR_HANDLER')) {
    define('ADODB_ERROR_HANDLER', 'adoDBErrorHandler');
}

/**
* Default Error Handler. This will be called with the following params
*
* @param $dbms      the RDBMS you are connecting to
* @param $fn        the name of the calling function (in uppercase)
* @param $errno     the native error number from the database
* @param $errmsg    the native error msg from the database
* @param $p1        $fn specific parameter - see below
* @param $p2        $fn specific parameter - see below
* @param $thisConn  $current connection object - can be false if no connection object created
*/
function adoDBErrorHandler($dbms, $fn, $errno, $errmsg, $p1, $p2, &$thisConnection)
{
    if (error_reporting() == 0) {
        return; // obey @ protocol
    }

    switch ($fn) {
        case 'EXECUTE':
            $sql = $p1;
            $inputparams = $p2;

            $s = "$dbms error: [$errno: $errmsg] in $fn(\"$sql\")\n";
            break;

        case 'PCONNECT':
        case 'CONNECT':
            $host = $p1;
            $database = $p2;

            $s = "$dbms error: [$errno: $errmsg] in $fn($host, '****', '****', $database)\n";
            break;
        default:
            $s = "$dbms error: [$errno: $errmsg] in $fn($p1, $p2)\n";
            break;
    }

    $logger = getService('logger');
    $logger->error('[Database Error] '.$s);
}

/**
 * undocumented function
 *
 * @return void
 * @author
 **/
function dispatchEventWithParams($eventName, $params = array())
{
    $eventDispatcher = getService('event_dispatcher');

    $event = new \Symfony\Component\EventDispatcher\GenericEvent();
    foreach ($params as $paramName => $paramValue) {
        $event->setArgument($paramName, $paramValue);
    }

    $eventDispatcher->dispatch($eventName, $event);
}

function debug()
{
    if (array_key_exists('debug', $_REQUEST) && $_REQUEST['debug'] == 1) {
        $functionArgs = func_get_args();

        call_user_func_array('var_dump', $functionArgs);
    }
}

function getPiwikCode($useImage = false)
{
    $config = getService('setting_repository')->get('piwik');

    if (!is_array($config)
        || !array_key_exists('page_id', $config)
        || !array_key_exists('server_url', $config)
        || empty(trim($config['page_id']))
    ) {
        return '';
    }

    if ($useImage) {
        $code = generatePiwikImageCode($config);
    } else {
        $code = generatePiwikScriptCode($config);
    }

    return $code;
}

function generatePiwikScriptCode($config)
{
    $httpsHost = preg_replace("/http:/", "https:", $config['server_url']);

    $code = '<!-- Piwik -->
        <script type="text/javascript">
        var _paq = _paq || [];
        _paq.push([\'trackPageView\']);
        _paq.push([\'enableLinkTracking\']);
        (function() {
            var u = (("https:" == document.location.protocol) ? "'.
            $httpsHost . '" : "' . $config['server_url'] .'");
            _paq.push([\'setTrackerUrl\', u+\'piwik.php\']);
            _paq.push([\'setSiteId\', ' . $config['page_id'].']);
            var d=document, g=d.createElement(\'script\'), s=d.getElementsByTagName(\'script\')[0];
            g.type=\'text/javascript\';
            g.async=true; g.defer=true;
            g.src=u+\'piwik.js\'; s.parentNode.insertBefore(g,s);
        })();
        </script>
        <noscript>
            <img src="'. $config['server_url'] .'piwik.php?idsite='.
            $config['page_id'] .'" style="border:0" alt="" />
        </noscript>
        <!-- End Piwik Tracking Code -->';

    return $code;
}

function generatePiwikImageCode($config)
{
    $imgCode = '<img src="%spiwik.php?idsite=%d&amp;rec=1&amp;action_name=Newsletter&amp;url=%s" style="border:0" alt="" />';

    $code .= sprintf(
        $imgCode,
        $config['server_url'],
        $config['page_id'],
        urlencode(SITE_URL.'newsletter/'.date("YmdHis"))
    );

    return $code;
}

function getGoogleAnalyticsCode($useImage = false)
{
    $config = getService('setting_repository')->get('google_analytics');

    // Keep compatibility with old analytics store format
    if (is_array($config)
        && array_key_exists('api_key', $config)
    ) {
        $oldConfig = $config;
        $config = [];
        $config[]= $oldConfig;
    }

    if (!is_array($config)
        || !array_key_exists('0', $config)
        || !is_array($config[0])
        || !array_key_exists('api_key', $config[0])
        || empty(trim($config[0]['api_key']))
    ) {
        $config = [];
    }

    if ($useImage) {
        $code = genarateGAImageCode($config);
    } else {
        $code = generateGAScriptCode($config);
    }

    return $code;
}

function generateGAScriptCode($config)
{
    $code = "\n<script type=\"text/javascript\">\nvar _gaq = _gaq || [];\n";
    foreach ($config as $key => $account) {
        if (is_array($account)
            && array_key_exists('api_key', $account)
            && !empty(trim($account['api_key']))
        ) {
            if ($key == 0) {
                $code .= "_gaq.push(['_setAccount', '" . trim($account['api_key']) . "']);\n";
                if (array_key_exists('base_domain', $account)
                    && !empty(trim($account['base_domain']))
                ) {
                    $code .= "_gaq.push(['_setDomainName', '". trim($account['base_domain']) ."']);\n";
                }
                $code .= "_gaq.push(['_trackPageview']);\n";
            } else {
                $code .= "_gaq.push(['account{$key}._setAccount', '" . trim($account['api_key']) . "']);\n";
                if (array_key_exists('base_domain', $account)
                    && !empty(trim($account['base_domain']))
                ) {
                    $code .= "_gaq.push(['account{$key}._setDomainName', '". trim($account['base_domain']) ."']);\n";
                }
                $code .= "_gaq.push(['account{$key}._trackPageview']);\n";
            }
        }
    }

    // Add opennemas Account
    $code .= "_gaq.push(['onm._setAccount', 'UA-40838799-5']);\n";
    $code .= "_gaq.push(['onm._trackPageview']);\n";

    // Load ga.js script
    $code .= "(function() {\n"
        . "var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n"
        . "ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';\n"
        . "(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);\n"
        . "})();\n"
        . "</script>\n";

    return $code;
}

function genarateGAImageCode($config)
{
    $imgCode = '<img src="http://www.google-analytics.com/__utm.gif?utmwv=4&utmn=%s&utmdt=Newsletter [%s]&utmhn=%s&utmr=%s&utmp=%s&utmac=%s&utmcc=%s" style="border:0" alt="" />'."\n";

    $code = '';
    foreach ($config as $key => $account) {
        if (is_array($account)
            && array_key_exists('api_key', $account)
            && !empty(trim($account['api_key']))
        ) {
            $code .= sprintf(
                $imgCode,
                rand(0, 0x7fffffff),
                date('d/m/Y'),
                urlencode(SITE_URL),
                urlencode(SITE_URL.'newsletter/'.date("Ymd")),
                urlencode('newsletter/'.date("Ymd")),
                trim($account['api_key']),
                '__utma%3D999.999.999.999.999.1%3B'
            );
        }
    }

    // Add GA Image for onm UA tracking code
    $code .= sprintf(
        $imgCode,
        rand(0, 0x7fffffff),
        date('d/m/Y'),
        urlencode(SITE_URL),
        urlencode(SITE_URL.'newsletter/'.date("Ymd")),
        urlencode('newsletter/'.date("Ymd")),
        trim('UA-40838799-5'),
        '__utma%3D999.999.999.999.999.1%3B'
    );

    return $code;
}
