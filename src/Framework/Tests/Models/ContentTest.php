<?php
namespace Framework\Tests\Models;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-31 at 02:56:38.
 */
class ContentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Content
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new \Content;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Content::__get
     */
    public function testMagickPropertyContentTypeL10nName()
    {
        $this->assertEquals('Content', $this->object->content_type_l10n_name, 'Autogenerated content_type_l10n_name from class name');
    }

    /**
     * @covers Content::getStatus
     * @todo   Implement testGetStatus().
     */
    public function testGetStatus()
    {
        $content = new \Content();
        $content->in_litter = 1;
        $this->assertEquals(\Content::TRASHED, $content->getStatus());

        $content = new \Content();
        $content->available = 0;
        $this->assertEquals(\Content::PENDING, $content->getStatus());

        $content = new \Content();
        $content->content_status = 1;
        $content->available = 1;
        $this->assertEquals(\Content::AVAILABLE, $content->getStatus());
    }

    /**
     * @covers Content::load
     */
    public function testLoad()
    {
        $content = new \Content();
        $content->load(
            array(
                'pk_content'             => 123,
                'other_value'            => 'other value',
                'fk_content_type'        => 1,
                'pk_fk_content_category' => 2,
                'params'                 => 'a:2:{s:4:"test";i:1;s:5:"test2";i:2;}',
            )
        );
        $this->assertEquals(123, $content->id);
        $this->assertEquals('other value', $content->other_value);
        $this->assertEquals(1, $content->content_type);
        $this->assertEquals(2, $content->pk_fk_content_category);
        $this->assertEquals(array('test' => 1, 'test2' => 2), $content->params);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-22 03:03:12';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, \Content::DUED);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithInTimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, \Content::IN_TIME);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, \Content::POSTPONED);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithPostponedAndNotEndtimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, \Content::POSTPONED);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithNotScheduledContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, \Content::NOT_SCHEDULED);
    }

    /**
     * @covers Content::isScheduled
     *
     *   starttime   actual
     * ------(----------|----------
     */
    public function testIsScheduledWithNotScheduledContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isScheduled($now);

        $this->assertFalse($result);
    }


    /**
     * @covers Content::isScheduled
     *
     *    actual
     *   starttime
     * ------(--------------------
     */
    public function testIsScheduledWithStartAndActualTimesEquals()
    {
        $content = new \Content();

        $now                = '2012-08-21 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isScheduled($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isScheduled
     *
     *   starttime    actual
     * ------(----------|----------
     */
    public function testIsScheduledWithInTimeScheduledContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-24 03:03:12';

        $result = $content->isScheduled($now);

        $this->assertTrue($result);
    }


    /**
     * @covers Content::isScheduled
     *
     *   starttime    actual
     * ------(----------|----------
     */
    public function testIsScheduledWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-19 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isScheduled($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isStarted
     */
    public function testIsStartedWithInTimecontentContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isStarted($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isStarted
     */
    public function testIsStartedWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-19 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isStarted($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isInTime
     */
    public function testIsStartedWithDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-22 03:03:12';

        $result = $content->isStarted($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isPostponed
     */
    public function testIsPostponedWithInTimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isPostponed($now);

        $this->assertFalse($result);
    }

        /**
     * @covers Content::isPostponed
     */
    public function testIsPostponedWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isPostponed($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isPostponed
     */
    public function testIsPostponedWithDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-24 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isPostponed($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInTimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-24 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertTrue($result);
    }

        /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInNowAndEntTimeEqualsContent()
    {
        $content = new \Content();

        $now                = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isSuggested
     * @todo   Implement testIsSuggested().
     */
    public function testIsSuggested()
    {
        $content = new \Content();
        $content->frontpage = 1;
        $this->assertTrue($content->isSuggested());

        $content->frontpage = 0;
        $this->assertFalse($content->isSuggested());

    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeName()
    {
        $content = new \Content();
        $content->content_type = 1;

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals('article', $contentTypeName);
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeNameWithEmptyContentType()
    {
        $content = new \Content();
        $content->content_type = '';

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals(false, $contentTypeName);
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeNameWithNotValidContentType()
    {
        $content = new \Content();
        $content->content_type = -1;

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals(false, $contentTypeName);
    }

    // /**
    //  * @covers Content::setNumViews
    //  */
    // public function testDisallowGoogleToIncrementSetNumViews()
    // {
    //     $_SERVER['HTTP_USER_AGENT'] = 'google';
    //     $setNumViews = \Content::setNumViews(650);

    //     $this->assertFalse($setNumViews);
    // }

    // /**
    //  * @covers Content::setNumViews
    //  */
    // public function testDisallowEmptyIdOnSetNumViews()
    // {
    //     $_SERVER['HTTP_USER_AGENT'] = 'Firefox';
    //     $setNumViews = \Content::setNumViews(0);
    //     $this->assertFalse($setNumViews);

    //     $setNumViews = \Content::setNumViews('');
    //     $this->assertFalse($setNumViews);

    //     $setNumViews = \Content::setNumViews();
    //     $this->assertFalse($setNumViews);

    //     $setNumViews = \Content::setNumViews(array());
    //     $this->assertFalse($setNumViews);
    // }

    /**
     * @covers Content::isReadyForPublish
     */
    public function testIsReadyForPublish()
    {
        // Content in time, available and not in litter
        $this->object->starttime = '2012-08-21 03:03:12';
        $this->object->endtime   = '';
        $this->object->content_status = 1;
        $this->object->in_litter = 0;

        $this->assertTrue($this->object->isReadyForPublish());

        // Content not available
        $content = new \Content();
        $content->starttime = '2052-08-21 03:03:12';
        $content->endtime   = '';
        $content->content_status = 0;
        $content->in_litter = 0;

        $this->assertFalse($content->isReadyForPublish());

        // Content in litter
        $content = new \Content();
        $content->starttime = '2052-08-21 03:03:12';
        $content->endtime   = '';
        $content->content_status = 1;
        $content->in_litter = 1;

        $this->assertFalse($content->isReadyForPublish());

        // Content available but with an endtime in the past
        $content = new \Content();
        $content->endtime   = '';
        $content->endtime   = '1912-08-21 03:03:12';
        $content->content_status = 1;
        $content->in_litter = 0;

        // $this->assertFalse($content->isReadyForPublish());
    }
}
