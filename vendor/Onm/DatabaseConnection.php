<?php
/**
 * Defines the Onm\DatabaseConnection class
 *
 * This file is part of the Onm package.
 *
 * (c)  OpenHost S.L. <developers@openhost.es>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @package  Onm
 **/
namespace Onm;

/**
* Wrapper for the AdoDB library for making it container compatible
*
* @package  Onm
*/
class DatabaseConnection
{
    /**
     * The database connection with write-actions support
     *
     * @var AdodbConnection
     **/
    public $masterConnection = null;

    /**
     * The read-only database connection
     *
     * @var AdodbConnection
     **/
    public $readOnlyConnections = null;

    /**
     * Whether to use replication
     * This property is autogenerated from the
     * connection params (if there are slave servers then this will be true)
     *
     * @var boolean
     **/
    private $useReplication = false;

    /**
     * The database server connection params
     *
     * @var array
     **/
    private $connectionParams = null;

    /**
     * Stores the query error
     *
     * @var string
     **/
    public  $error = null;

    /**
     * Starts the database connection
     *
     * @param array $params an array containing the database server connection params
     *
     * @return DatabaseConnection the object
     **/
    public function connect($params)
    {
        $this->connectionParams = $params;

        $this->defaultConnection = $params['dbal']['default_connection'];
        $this->connectionParams  = $params['dbal']['connections'][$this->defaultConnection];
        $this->useReplication    = array_key_exists('slaves', $this->connectionParams);

        list($this->masterConnection, $this->readOnlyConnections) =
            $this->prepareMasterSlaveConnection($this->connectionParams);

        return $this;
    }

    /**
     * Builds a AdoDBConnection given a set of params
     *
     * @return void
     **/
    public function prepareMasterSlaveConnection($params)
    {
        if (!array_key_exists('charset', $params)) {
            $params['charset'] = 'UTF8';
        }

        $connection = $this->initConnection($params);
        $readOnlyConnections = array();

        if (array_key_exists('slaves', $params)) {
            $slaves = $params['slaves'];
            unset($params['slaves']);

            foreach ($slaves as $slave) {
                $slaveParams = array_filter($slave, function($item) {
                    return !is_null($item);
                });
                $slaveParams = array_merge($params, $slaveParams);

                $slaveConnection = $this->initConnection($slaveParams);
                if (is_object($slaveConnection)) {
                    $readOnlyConnections []= $slaveConnection;
                }
            }
        }


        return array($connection, $readOnlyConnections);
    }

    /**
     * undocumented function
     *
     * @return void
     * @author
     **/
    public function initConnection($params)
    {
        if ($params['charset'] == 'UTF-8') {
            $params['charset'] = 'UTF8';
        }

        $connection = \ADONewConnection($params['driver']);

        // Not valid/supported driver
        if (!is_object($connection)) {
            return null;
        }
        $connection->Connect(
            $params['host'],
            $params['user'],
            $params['password'],
            $params['dbname']
        );

        // Failed connection
        if (!$connection->_connectionID) {
            return null;
        }

        $connection->SetFetchMode(ADODB_FETCH_ASSOC);
        $connection->bulkBind = true;

        $connection->Execute("SET names '{$params['charset']}'");

        return $connection;
    }

    /**
     * Returns the proper connection whether is a read or a write query
     * given the SQL method to execute
     *
     * @param string $method The method to execute
     * @param array  $params The parameters of the call
     *
     * @return the database connection
     **/
    public function getConnection($method, $params)
    {
        $isReadOnlyQuery = stripos($params[0], 'SELECT') !== false;

        if ($this->useReplication
            && count($this->readOnlyConnections) > 0
            && $isReadOnlyQuery
        ) {
            $index = rand(0, count($this->readOnlyConnections) -1);

            return $this->readOnlyConnections[$index];
        } else {
            return $this->masterConnection;
        }
    }

    /**
     * Redirects all the calls to the AdodbConnection instance
     *
     * @param string $method the method to call
     * @param array $params the list of parameters to pass to the method
     *
     * @return mixed the result of the method call
     **/
    public function __call($method, $params)
    {
        $connection = $this->getConnection($method, $params);

        $rs = call_user_func_array(array($connection, $method), $params);

        if ($rs === false) {
            $this->error = $connection->ErrorMsg();
        }

        return $rs;
    }
}
