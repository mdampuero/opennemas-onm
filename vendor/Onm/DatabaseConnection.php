<?php
/**
 * Defines the Onm\DatabaseConnection class
 *
 * This file is part of the Onm package.
 *
 * (c)  OpenHost S.L. <developers@openhost.es>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @package  Onm
 **/
namespace Onm;

/**
* Wrapper for the AdoDB library for making it container compatible
*
* @package  Onm
*/
class DatabaseConnection
{
    /**
     * The database connection with write-actions support
     *
     * @var AdodbConnection
     **/
    public $connection = null;

    /**
     * The read-only database connection
     *
     * @var AdodbConnection
     **/
    public $readOnlyConnection = null;

    /**
     * Whether to use replication
     * This property is autogenerated from the
     * connection params (if there are slave servers then this will be true)
     *
     * @var boolean
     **/
    private $useReplication = false;

    /**
     * The database server connection params
     *
     * @var array
     **/
    private $connnectionParams = null;

    /**
     * Starts the database connection
     *
     * @param array $params an array containing the database server connection params
     *
     * @return DatabaseConnection the object
     **/
    public function connect($params)
    {
        $this->connnectionParams = $params;
        $this->useReplication = false;

        if (array_key_exists('database_replication', $params)
            && $params['database_replication'] == true
        ) {
            $this->useReplication = true;
        };

        $this->connnectionParams = $params['connections'];

        foreach ($this->connnectionParams as $connParams) {

            $connection = \ADONewConnection($connParams['database_driver']);
            $connection->Connect(
                $connParams['database_host'],
                $connParams['database_user'],
                $connParams['database_password'],
                $connParams['database_name'],
                $connParams['database_driver']
            );
            $connection->bulkBind = true;

            if ($this->useReplication
                && array_key_exists('slave', $connParams)
                && $connParams['slave'] == true) {
                $this->readOnlyConnection []= $connection;
            } else {
                $this->connection []= $connection;
            }
        }

        return $this;
    }

    /**
     * Returns the proper connection whether is a read or a write query
     * given the SQL method to execute
     *
     * @param string $method The method to execute
     * @param array  $params The parameters of the call
     *
     * @return the database connection
     **/
    public function getConnection($method, $params)
    {
        $isReadOnlyQuery = stripos($params[0], 'SELECT') !== false;

        if ($this->useReplication && $isReadOnlyQuery) {
            return $this->readOnlyConnection[0];
        } else {
            return $this->connection[0];
        }
    }

    /**
     * Redirects all the calls to the AdodbConnection instance
     *
     * @param string $method the method to call
     * @param array $params the list of parameters to pass to the method
     *
     * @return mixed the result of the method call
     **/
    public function __call($method, $params)
    {
        $connection = $this->getConnection($method, $params);
        // $rs = $connection->Execute('SELECT * FROM articles');
        $rs = call_user_func_array(array($connection, $method), $params);

        $this->error = $connection->ErrorMsg();

        return $rs;
    }
}
