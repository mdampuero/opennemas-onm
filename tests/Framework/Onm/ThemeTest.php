<?php
namespace Onm;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-13 at 19:27:26.
 */
class ThemeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Theme
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->theme = new \Onm\Theme(
            array(
                'name'        => 'Dummy theme',
                'version'     => '1.1',
                'description' => 'Dummy theme description',
                'author'      => 'OpenHost S.L.',
                'author_uri'  => 'http://www.openhost.es',
            )
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->theme = null;
    }

    /**
     * @covers Onm\Theme::__construct
     */
    public function testConstruct()
    {
        $this->theme = new \Onm\Theme(
            array(
                'name'        => 'Dummy theme',
                'version'     => '1.1',
                'description' => 'Dummy theme description',
                'author'      => 'OpenHost S.L.',
                'author_uri'  => 'http://www.openhost.es',
            )
        );

        $this->assertEquals($this->theme->name, 'Dummy theme');
        $this->assertEquals($this->theme->version, '1.1');
        $this->assertEquals($this->theme->description, 'Dummy theme description');
        $this->assertEquals($this->theme->author, 'OpenHost S.L.');
        $this->assertEquals($this->theme->author_uri, 'http://www.openhost.es');
    }


    /**
     * @covers Onm\Theme::registerLayout
     */
    public function testRegisterLayout()
    {
        $this->theme->registerLayout(
            'base',
            array(
                'name' => 'Test layout',
            )
        );

        $this->assertEquals(
            $this->theme->getLayout('base'),
            array(
                'name' => 'Test layout',
                'menu' => 'frontpage'
            )
        );
    }

    /**
     * @covers Onm\Theme::getLayouts
     */
    public function testGetLayouts()
    {
        $this->theme->registerLayout(
            'base',
            array(
                'name' => 'Test layout',
            )
        );

        $this->assertEquals(count($this->theme->getLayouts()), 1);
        $this->assertTrue(is_array($this->theme->getLayouts()));
    }

    /**
     * @covers Onm\Theme::getLayout
     */
    public function testGetLayout()
    {
        $this->theme->registerLayout(
            'base',
            array(
                'name' => 'Test layout',
            )
        );

        $layout = $this->theme->getLayout('base');

        $this->assertTrue(is_array($layout));
        $this->assertEquals(
            $layout,
            array(
                'name' => 'Test layout',
                'menu' => 'frontpage'
            )
        );
    }

    /**
     * @covers Onm\Theme::getLayout
     */
    public function testGetLayoutWithoutLayoutRegistered()
    {
        $layout = $this->theme->getLayout('base');

        $this->assertEquals($layout, false);
    }

    /**
     * @covers Onm\Theme::registerMenu
     */
    public function testRegisterMenu()
    {
        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage',
                'description' => 'Frontpage',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );

        $menu = $this->theme->getMenu('frontpage');

        $this->assertTrue(is_array($menu));
    }

    /**
     * @covers Onm\Theme::registerMenu
     * @expectedException Exception
     */
    public function testRegisterMenuNotArray()
    {
        $this->theme->registerMenu(
            false
        );
    }

    /**
     * @covers Onm\Theme::registerMenu
     * @expectedException Exception
     */
    public function testRegisterMenuWithoutName()
    {
        $this->theme->registerMenu(
            array(
                'description' => 'Frontpage',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );
    }

    /**
     * @covers Onm\Theme::registerMenu
     * @expectedException Exception
     */
    public function testRegisterMenuWithAlreadyExistingMenu()
    {
        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage',
                'description' => 'Frontpage',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );

        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage',
                'description' => 'Frontpage',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );
    }

    /**
     * @covers Onm\Theme::getMenu
     */
    public function testGetMenuWithoutMenuRegistered()
    {
        $menu = $this->theme->getMenu('frontpage');
        $this->assertEquals($menu, false);
    }

    /**
     * @covers Onm\Theme::getMenuDefinitions
     */
    public function testGetMenuDefinitions()
    {
        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage',
                'description' => 'Frontpage',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );

        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage2',
                'description' => 'Frontpage2',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );

        $menus = $this->theme->getMenuDefinitions();

        $this->assertTrue(count($menus) == 2);
    }

    /**
     * @covers Onm\Theme::getMenus
     */
    public function testGetMenus()
    {
        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage2',
                'description' => 'Frontpage2',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );

        $menus = $this->theme->getMenus();

        $this->assertTrue(is_array($menus));
    }

    /**
     * @covers Onm\Theme::getMenu
     */
    public function testGetMenu()
    {
        $this->theme->registerMenu(
            array(
                'name'        => 'frontpage2',
                'description' => 'Frontpage2',
                'class'       => 'menu',
                'before_menu' => '<div id="%1$s" class="menu %2$s">',
                'after_menu'  => '</div>',
            )
        );

        $menus = $this->theme->getMenu('frontpage2');

        $this->assertTrue(is_array($menus));
    }

        /**
     * @covers Onm\Theme::getMenu
     */
    public function testGetMenuWithoutRegisteredMenus()
    {
        $menus = $this->theme->getMenu('frontpage2');

        $this->assertFalse(is_array($menus));
    }

    /**
     * @covers Onm\Theme::registerTranslationsDomain
     */
    public function testRegisterTranslationsDomain()
    {
        $this->theme->registerTranslationsDomain('test', './test');

        $this->assertEquals($this->theme->l10ndomain, 'test');
        $this->assertEquals($this->theme->translationsDir, './test');
    }

    /**
     * @covers Onm\Theme::getTranslationDomain
     */
    public function testGetTranslationDomain()
    {
        $this->theme->registerTranslationsDomain('test', './test');

        $this->assertEquals($this->theme->getTranslationDomain(), 'test');
    }

    /**
     * @covers Onm\Theme::getTranslationDomain
     */
    public function testGetTranslationDomainWithoutRegisteredDomain()
    {
        $this->assertEquals($this->theme->getTranslationDomain(), false);
    }

    /**
     * @covers Onm\Theme::getTranslationsDir
     */
    public function testGetTranslationsDir()
    {
        $this->theme->registerTranslationsDomain('test', './test');

        $this->assertEquals($this->theme->getTranslationsDir(), './test');
    }

    /**
     * @covers Onm\Theme::getTranslationsDir
     */
    public function testGetTranslationsDirWithoutRegisteredDomain()
    {
        $this->assertEquals($this->theme->getTranslationsDir(), false);
    }

    /**
     * @covers Onm\Theme::hasL10nSupport
     */
    public function testHasL10nSupport()
    {
        $this->theme->registerTranslationsDomain('test', './test');

        $this->assertTrue($this->theme->hasL10nSupport());
    }

    /**
     * @covers Onm\Theme::hasL10nSupport
     */
    public function testHasL10nSupportWithoutDomainRegistered()
    {
        $this->assertFalse($this->theme->hasL10nSupport());
    }

    /**
     * @covers Onm\Theme::registerDisposition
     */
    public function testRegisterDisposition()
    {
        $this->theme->registerDisposition('test');

        $this->assertEquals($this->theme->disposition, 'test');
    }

    /**
     * @covers Onm\Theme::getDisposition
     */
    public function testGetDisposition()
    {
        $this->theme->registerDisposition('test');

        $this->assertEquals($this->theme->getDisposition(), 'test');
    }

    /**
     * @covers Onm\Theme::getDisposition
     */
    public function testGetDispositionWithoutRegisteredDisposition()
    {
        $this->assertEquals($this->theme->getDisposition(), false);
    }

    /**
     * @covers Onm\Theme::registerParentTheme
     */
    public function testRegisterParentThemeEmpty()
    {
        $this->assertEquals($this->theme->parentTheme, null);

        $this->theme->registerParentTheme('base');
        $this->assertEquals($this->theme->parentTheme, 'base');
    }

    /**
     * @covers Onm\Theme::getParenttheme
     */
    public function testGetParentTheme()
    {
        $this->assertFalse($this->theme->getParentTheme());

        $this->theme->registerParentTheme('base');
        $this->assertEquals($this->theme->getParentTheme(), 'base');
    }
}
