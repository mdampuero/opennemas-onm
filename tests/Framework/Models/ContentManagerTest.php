<?php
namespace Framework\Tests\Models;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-31 at 02:56:38.
 */
class ContentManagerTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Content
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->container = $this->getMockBuilder('ServiceContainer')
            ->setMethods([ 'get', 'hasParameter' ])
            ->getMock();

        $this->kernel = $this->getMockBuilder('Kernel')
            ->setMethods([ 'getContainer' ])
            ->getMock();

        $this->locale = $this->getMockBuilder('Common\Core\Component\Locale\Locale')
            ->disableOriginalConstructor()
            ->setMethods([ 'getTimeZone' ])
            ->getMock();

        $this->container->expects($this->any())->method('get')
            ->with('core.locale')->willReturn($this->locale);
        $this->kernel->expects($this->any())->method('getContainer')
            ->willReturn($this->container);
        $this->locale->expects($this->any())->method('getTimeZone')
            ->willReturn(new \DateTimeZone('UTC'));

        $GLOBALS['kernel'] = $this->kernel;

        $this->object = new \Content;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ContentManager::getContentTypes
     */
    public function testGetContentTypes()
    {
        $contentTypes = \ContentManager::getContentTypes();

        $this->assertTrue(is_array($contentTypes));
        $this->assertEquals($contentTypes[0]['pk_content_type'], 1);
    }

    /**
     * @covers ContentManager::getContentTypeIdFromName
     */
    public function testGetContentTypeIdFromName()
    {
        $contentTypeId = \ContentManager::getContentTypeIdFromName('article');

        $this->assertEquals($contentTypeId, 1);
    }

    /**
     * @covers ContentManager::getContentTypeIdFromName
     */
    public function testGetContentTypeIdFromNameWithInvalidContentTypeName()
    {
        $contentTypeId = \ContentManager::getContentTypeIdFromName('not-existing-type');

        $this->assertEquals($contentTypeId, false);
    }

    /**
     * @covers ContentManager::getEarlierStarttimeOfScheduledContents
     */
    public function testGetEarlierStarttimeOfScheduledContents()
    {
        $contents = [];
        $expires  = \ContentManager::getEarlierStarttimeOfScheduledContents($contents);

        $this->assertEquals($expires, false);
    }

    /**
     * @covers ContentManager::getInTime
     */
    public function testGetInTime()
    {
        $rc = new \ReflectionClass('ContentManager');
        $cm = $rc->newInstanceWithoutConstructor();

        // Check with content in time
        $content = new \Content();
        $content->load([
            'starttime' => '2012-08-22 03:03:12',
            'endtime'   => '3012-08-27 03:03:12',
        ]);

        $this->assertEquals(1, count($cm->getinTime([ $content ])));

        // Check with content with scheduling incorrent (start = end)
        $content = new \Content();
        $content->load([
            'starttime' => '2012-08-22 03:03:12',
            'endtime'   => '2012-08-22 03:03:12',
        ]);

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Check with content scheduled in the future
        $content = new \Content();
        $content->load([
            'starttime' => '3059-08-22 03:03:12',
            'endtime'   => '3059-08-23 03:03:12',
        ]);

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Check with content dued in the past
        $content = new \Content();
        $content->load([
            'starttime' => '2010-08-22 03:03:12',
            'endtime'   => '2010-08-23 03:03:12',
        ]);

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Check with content with null values
        $content = new \Content();
        $content->load([
            'starttime' => null,
            'endtime'   => null,
        ]);

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Check with content with zeroed values
        $content = new \Content();
        $content->load([
            'starttime' => '0000-00-00 00:00:00',
            'endtime'   => '0000-00-00 00:00:00',
        ]);

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Now with Arrays
        // ----------------------------------------------------------

        // Check with content in time
        $content = [
            'starttime' => '2013-08-22 03:03:12',
            'endtime'   => '3012-08-27 03:03:12',
        ];

        $this->assertEquals(1, count($cm->getinTime([ $content ])));

        // Check with content with scheduling incorrent (start = end)
        $content = [
            'starttime' => '2012-08-22 03:03:12',
            'endtime'   => '2012-08-22 03:03:12',
        ];

        $this->assertEquals(1, count($cm->getinTime([ $content ])));

        // Check with content scheduled in the future
        $content = [
            'starttime' => '3059-08-22 03:03:12',
            'endtime'   => '3059-08-23 03:03:12',
        ];

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Check with content dued in the past
        $content = [
            'starttime' => '2010-08-22 03:03:12',
            'endtime'   => '2010-08-23 03:03:12',
        ];

        $this->assertEquals(0, count($cm->getinTime([ $content ])));

        // Check with content with null values
        $content = [
            'starttime' => null,
            'endtime'   => null,
        ];

        $this->assertEquals(1, count($cm->getinTime([ $content ])));

        // Check with content with zeroed values
        $content = [
            'starttime' => '0000-00-00 00:00:00',
            'endtime'   => '0000-00-00 00:00:00',
        ];

        $this->assertEquals(1, count($cm->getinTime([ $content ])));

        // Check with content with zeroed values
        $content = [
            'starttime' => '0000-00-00 00:00:00',
            'endtime'   => '0000-00-00 00:00:00',
        ];

        $this->assertEquals(1, count($cm->getinTime([ $content ])));
    }

    /**
     * @covers ContentManager::isInTime
     */
    public function testIsInTime()
    {
        $now = '2012-08-22 03:03:12';

        $rc = new \ReflectionClass('ContentManager');
        $cm = $rc->newInstanceWithoutConstructor();

        // Check Content::isInTime with no endtime and no starttime
        $startTime = null;
        $endTime   = null;
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));
        $startTime = '0000-00-00 00:00:00';
        $endTime   = '0000-00-00 00:00:00';
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));

        // Check Content::isInTime with no starttime
        $startTime = null;
        $endTime   = '9999-12-12 03:03:12';
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));
        $startTime = null;
        $endTime   = '2012-08-21 03:03:12';
        $this->assertFalse($cm->isInTime($startTime, $endTime, $now));

        // Check Content::isInTime with no endtime
        $startTime = '2012-08-21 03:03:12';
        $endTime   = null;
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));

        $startTime = '2012-08-23 03:03:12';
        $endTime   = null;
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));

        // Check Content::isInTime with starttime and endtime defined
        $startTime = '2012-08-21 03:03:12';
        $endTime   = '9999-08-23 03:03:12';
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));

        $startTime = '2012-08-23 03:03:12';
        $endTime   = '2012-08-24 03:03:12';
        $this->assertFalse($cm->isInTime($startTime, $endTime, $now));

        $startTime = '2012-08-20 03:03:12';
        $endTime   = '2012-08-21 03:03:12';
        $this->assertFalse($cm->isInTime($startTime, $endTime, $now));

        $startTime = '2012-08-21 03:03:12';
        $endTime   = '2012-08-20 03:03:12';
        $this->assertFalse($cm->isInTime($startTime, $endTime, $now));

        // Check Content::isInTime with starttime and endtime are equals
        $startTime = '2012-08-21 03:03:12';
        $endTime   = '2012-08-21 03:03:12';
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));
        $startTime = '2012-08-22 03:03:12';
        $endTime   = '2012-08-22 03:03:12';
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));
        $startTime = '2012-08-23 03:03:12';
        $endTime   = '2012-08-23 03:03:12';
        $this->assertTrue($cm->isInTime($startTime, $endTime, $now));
    }
}
