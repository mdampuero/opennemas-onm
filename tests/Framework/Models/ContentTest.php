<?php
namespace Framework\Tests\Models;

use Common\Core\Component\Locale\Locale;
use Common\Model\Entity\Category;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-31 at 02:56:38.
 */
class ContentTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Content
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = [
            'backend'  => [
                'language' => [
                    'available' => [ 'en_US', 'es_ES' ],
                    'selected'  => 'en_US',
                    'slug'      => []
                ],
                'timezone' => 'UTC'
            ],
            'frontend' => [
                'language' => [
                    'available' => [ 'en_US', 'es_ES' ],
                    'selected'  => 'en_US',
                    'slug'      => []
                ],
                'timezone' => 'UTC'
            ]
        ];

        $this->locale = new Locale($this->config, '/wubble/flob');
        $this->locale->configure([
            'frontend' => [
                'language' => [
                    'selected'  => 'en',
                    'available' => [ 'en', 'es' ],
                ]
            ]
        ]);

        $this->cache = $this->getMockBuilder('Cache')
            ->setMethods([ 'fetch' ])
            ->getMock();
        $this->cache->expects($this->any())->method('fetch')
            ->willReturn([]);

        $this->container = $this->getMockBuilder('ServiceContainer')
            ->setMethods([ 'get', 'hasParameter' ])
            ->getMock();

        $this->conn = $this->getMockBuilder('DatabaseConnection')
            ->setMethods([ 'fetchAll' ])
            ->getMock();

        $this->conn->expects($this->any())->method('fetchAll')
            ->willReturn([]);

        $this->fm = $this->getMockBuilder('Opennemas\Data\Filter\FilterManager')
            ->disableOriginalConstructor()
            ->setMethods([ 'filter', 'get', 'set' ])
            ->getMock();

        $this->instance = $this->getMockBuilder('Instance')
            ->setMethods([ 'hasMultilanguage' ])
            ->getMock();

        $this->kernel = $this->getMockBuilder('Kernel')
            ->setMethods([ 'getContainer' ])
            ->getMock();

        $this->service = $this->getMockBuilder('CategoryService')
            ->setMethods([ 'getItem' ])
            ->getMock();

        $this->container->expects($this->any())->method('get')
            ->will($this->returnCallback([ $this, 'serviceContainerCallback' ]));
        $this->fm->expects($this->any())->method('set')
            ->willReturn($this->fm);
        $this->fm->expects($this->any())->method('filter')
            ->willReturn($this->fm);
        $this->kernel->expects($this->any())->method('getContainer')
            ->willReturn($this->container);

        $GLOBALS['kernel'] = $this->kernel;

        $this->object = new \Content;
    }

    public function serviceContainerCallback($name)
    {
        switch ($name) {
            case 'api.service.category':
                return $this->service;
            case 'core.instance':
                return $this->instance;
            case 'core.locale':
                return $this->locale;
            case 'data.manager.filter':
                return $this->fm;
            case 'dbal_connection':
                return $this->conn;
            case 'cache':
                return $this->cache;
        }

        return null;
    }

    public function testGetAndSetWhenNoMultilanguage()
    {
        $content  = new \Content();
        $property = new \ReflectionProperty($content, 'title');

        $property->setAccessible(true);

        $this->instance->expects($this->any())->method('hasMultilanguage')
            ->willReturn(false);

        $content->title          = 'fred';
        $content->content_status = 1;

        $this->assertEquals('fred', $property->getValue($content));
        $this->assertEquals('fred', $content->title);
        $this->assertEquals(1, $content->content_status);

        $content->title             = [ 'en' => 'mumble' ];
        $content->content_status    = 1;
        $content->content_type_name = 'article';

        $this->assertEquals(1, $content->content_status);

        $this->fm->expects($this->at(2))->method('get')
            ->willReturn('mumble');


        $this->assertEquals([ 'en' => 'mumble' ], $property->getValue($content));
        $this->assertEquals('mumble', $content->title);
    }

    public function testGetAndSetWhenMultilanguage()
    {
        $content  = new \Content();
        $property = new \ReflectionProperty($content, 'title');

        $property->setAccessible(true);

        $this->instance->expects($this->any())->method('hasMultilanguage')
            ->willReturn(true);

        // No multiple languages in database
        $property->setValue($content, 'fred');

        $content->content_status    = 1;
        $content->content_type_name = 'article';

        $this->fm->expects($this->at(2))->method('get')
            ->willReturn([ 'en' => 'fred' ]);

        $this->assertEquals('fred', $property->getValue($content));
        $this->assertEquals([ 'en' => 'fred' ], $content->title);
        $this->assertEquals(1, $content->content_status);

        $this->fm->expects($this->at(2))->method('get')
            ->willReturn([ 'en' => 'fred' ]);

        // Multiple languages in database
        $content->title = 'fred';

        $this->fm->expects($this->at(2))->method('get')
            ->willReturn([ 'en' => 'fred' ]);

        $this->assertEquals([ 'en' => 'fred' ], $property->getValue($content));
        $this->assertEquals([ 'en' => 'fred' ], $content->title);
    }

    /**
     * @covers Content::getStatus
     */
    public function testGetStatus()
    {
        $content            = new \Content();
        $content->in_litter = 1;
        $this->assertEquals(\Content::TRASHED, $content->getStatus());

        $content = new \Content();
        $this->assertEquals(\Content::PENDING, $content->getStatus());

        $content                 = new \Content();
        $content->content_status = 1;
        $this->assertEquals(\Content::AVAILABLE, $content->getStatus());
    }

    public function testLoad()
    {
        $this->service->expects($this->any())->method('getItem')
            ->willReturn(new Category([
                'name'  => 'grault',
                'title' => 'Grault'
            ]));

        $content = new \Content();
        $content->load([
            'title'                  => 'a:2:{s:2:"en";s:3:"bar";s:2:"es";s:4:"gorp";}',
            'pk_content'             => 123,
            'other_value'            => 'other value',
            'fk_content_type'        => 1,
            'category_id'            => 2,
            'params'                 => 'a:2:{s:4:"test";i:1;s:5:"test2";i:2;}',
            'category_slug'          => 'testing',
        ]);
        $this->assertEquals(123, $content->id);
        $this->assertEquals('other value', $content->other_value);
        $this->assertEquals(1, $content->content_type);
        $this->assertEquals(2, $content->category_id);
        $this->assertEquals([ 'test' => 1, 'test2' => 2 ], $content->params);

        $property = new \ReflectionProperty($content, 'title');
        $property->setAccessible(true);

        $this->assertEquals([ 'en' => 'bar', 'es' => 'gorp' ], $property->getValue($content));
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeName()
    {
        $content               = new \Content();
        $content->content_type = 1;

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals('article', $contentTypeName);
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeNameWithEmptyContentType()
    {
        $content               = new \Content();
        $content->content_type = '';

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals(false, $contentTypeName);
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeNameWithNotValidContentType()
    {
        $content               = new \Content();
        $content->content_type = -1;

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals(false, $contentTypeName);
    }

    /**
     * @covers Content::isOwner()
     */
    public function testIsOwner()
    {
        // Check that the content belongs to publisher 4
        $content = new \Content();
        $content->load([
            'fk_publisher' => 4,
        ]);

        $this->assertTrue($content->isOwner(4));

        // Check that the content belongs to the author 4
        $content = new \Content();
        $content->load([
            'fk_publisher' => 4,
            'fk_author'    => 5,
        ]);

        $this->assertTrue($content->isOwner(5));

        // Check that the content doesnt belong to a unexisting user
        $content = new \Content();
        $content->load([
            'fk_publisher' => 4,
            'fk_author'    => 5,
        ]);

        $this->assertFalse($content->isOwner(40));
    }
}
