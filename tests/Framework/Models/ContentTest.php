<?php
namespace Framework\Tests\Models;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-31 at 02:56:38.
 */
class ContentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Content
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new \Content;
    }

    /**
     * @covers Content::getStatus
     */
    public function testGetStatus()
    {
        $content            = new \Content();
        $content->in_litter = 1;
        $this->assertEquals(\Content::TRASHED, $content->getStatus());

        $content            = new \Content();
        $content->available = 0;
        $this->assertEquals(\Content::PENDING, $content->getStatus());

        $content                 = new \Content();
        $content->content_status = 1;
        $content->available      = 1;
        $this->assertEquals(\Content::AVAILABLE, $content->getStatus());
    }

    /**
     * @covers Content::load
     */
    public function testLoad()
    {
        $content = new \Content();
        $content->load([
            'pk_content'             => 123,
            'other_value'            => 'other value',
            'fk_content_type'        => 1,
            'pk_fk_content_category' => 2,
            'params'                 => 'a:2:{s:4:"test";i:1;s:5:"test2";i:2;}',
            'category_name'          => 'testing',
        ]);
        $this->assertEquals(123, $content->id);
        $this->assertEquals('other value', $content->other_value);
        $this->assertEquals(1, $content->content_type);
        $this->assertEquals(2, $content->pk_fk_content_category);
        $this->assertEquals('testing', $content->category_name);
        $this->assertEquals([ 'test' => 1, 'test2' => 2 ], $content->params);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithNulledZeroedArticle()
    {
        $now = '2012-08-22 03:03:12';

        $content            = new \Content();
        $content->starttime = null;
        $content->endtime   = '2012-08-22 03:03:12';
        $this->assertEquals(\Content::NOT_SCHEDULED, $content->getSchedulingState($now));

        $content->starttime = null;
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertEquals(\Content::NOT_SCHEDULED, $content->getSchedulingState($now));

        $content->starttime = null;
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertEquals(\Content::NOT_SCHEDULED, $content->getSchedulingState($now));

        $content->starttime = null;
        $content->endtime   = null;
        $this->assertEquals(\Content::NOT_SCHEDULED, $content->getSchedulingState($now));

        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertEquals(\Content::NOT_SCHEDULED, $content->getSchedulingState($now));
    }

    /*
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithPostponedArticle()
    {
        $now = '2012-08-22 03:03:12';

        $content            = new \Content();
        $content->starttime = '2013-08-22 03:03:12';
        $content->endtime   = null;
        $this->assertEquals(\Content::POSTPONED, $content->getSchedulingState($now));

        // Check scheduling state with postponed article with nulled endtime
        $content->starttime = '2013-08-22 03:03:12';
        $content->endtime   = '2013-08-23 03:03:12';
        $this->assertEquals(\Content::POSTPONED, $content->getSchedulingState($now));
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithDuedArticle()
    {
        $now = '2012-08-22 03:03:12';

        // Check scheduling state with dued article with valid starttime
        $content            = new \Content();
        $content->starttime = '2013-08-20 03:03:12';
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertEquals(\Content::DUED, $content->getSchedulingState($now));
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithInTimeArticle()
    {
        $now = '2012-08-22 03:03:12';

        // Check scheduling state with in time article with valid starttime
        $content            = new \Content();
        $content->starttime = '2012-08-20 03:03:12';
        $content->endtime   = '2012-08-24 03:03:12';
        $this->assertEquals(\Content::IN_TIME, $content->getSchedulingState($now));

        // Check scheduling state with in time article with nulled starttime
        $content            = new \Content();
        $content->starttime = '2012-08-20 03:03:12';
        $content->endtime   = null;
        $this->assertEquals(\Content::IN_TIME, $content->getSchedulingState($now));
    }

    /**
     * @covers Content::isScheduled
     *
     */
    public function testIsScheduled()
    {
        $content = new \Content();
        $now     = '2012-08-22 03:03:12';

        //  now    start    end
        // --|-------(-------)--
        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = '2012-08-25 03:03:12';
        $this->assertTrue($content->isScheduled($now));

        // start    now     end
        // --(-------|-------)--
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-25 03:03:12';
        $this->assertTrue($content->isScheduled($now));

        // start    end     now
        // --(-------)-------|--
        $content->starttime = '2012-08-20 03:03:12';
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertTrue($content->isScheduled($now));

        //  now    start
        // --|-------(----------
        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = null;
        $this->assertTrue($content->isScheduled($now));

        // start    now
        // --(-------|----------
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = null;
        $this->assertTrue($content->isScheduled($now));

        $content->starttime = null;
        $content->endtime   = null;
        $this->assertFalse($content->isScheduled($now));

        $content->starttime = null;
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertFalse($content->isScheduled($now));

        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertFalse($content->isScheduled($now));
    }

    /**
     * @covers Content::isStarted
     */
    public function testIsStarted()
    {
        $content = new \Content();
        $now     = '2012-08-22 03:03:12';

        // Check Content::isStarted with starttime in past
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = null;
        $this->assertTrue($content->isStarted($now));

        // Check Content::isStarted with starttime in the future
        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = null;
        $this->assertFalse($content->isStarted($now));

        // Check Content::isStarted with zeroed/nulled starttime
        $content->starttime = null;
        $content->endtime   = null;
        $this->assertTrue($content->isStarted($now));

        $content->starttime = null;
        $content->endtime   = null;
        $this->assertTrue($content->isStarted($now));
    }

    /**
     * @covers Content::isPostponed
     */
    public function testIsPostponed()
    {
        $content = new \Content();
        $now     = '2012-08-22 03:03:12';

        // Check Content::isPostponed with starttime in future
        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = null;
        $this->assertTrue($content->isPostponed($now));

        // Check Content::isPostponed with starttime in the past
        $content->starttime = '2012-08-24 03:03:12';
        $content->endtime   = '2012-08-26 03:03:12';
        $this->assertTrue($content->isPostponed($now));

        // Check Content::isPostponed with zeroed/nulled starttime
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = null;
        $this->assertFalse($content->isPostponed($now));

        $content->starttime = null;
        $content->endtime   = null;
        $this->assertFalse($content->isPostponed($now));
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDued()
    {
        $content = new \Content();
        $now     = '2012-08-22 03:03:12';

        // Check Content::isPostponed with starttime in future
        $content->starttime = null;
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertTrue($content->isDued($now));

        // Check Content::isPostponed with starttime in the past
        $content->starttime = null;
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertFalse($content->isDued($now));

        // Check Content::isPostponed with in time content
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertFalse($content->isDued($now));

        // Check Content::isPostponed with dued content
        $content->starttime = '2012-08-20 03:03:12';
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertTrue($content->isDued($now));

        // Check Content::isPostponed with endtime date equals now
        $myNow              = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertFalse($content->isDued($myNow));

        // Check Content::isPostponed with zeroed/nulled starttime
        $content->starttime = null;
        $content->endtime   = null;
        $this->assertFalse($content->isDued($now));
    }

    /**
     * @covers Content::isInTime
     */
    public function testIsInTime()
    {
        $content = new \Content();
        $now     = '2012-08-22 03:03:12';

        // Check ContentManager::isInTime with no endtime and no starttime
        $content->starttime = null;
        $content->endtime   = null;
        $this->assertFalse($content->isInTime($now));

        // Check ContentManager::isInTime with no content->starttime
        $content->starttime = null;
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertFalse($content->isInTime($now));

        $content->starttime = null;
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertFalse($content->isInTime($now));

        // Check ContentManager::isInTime with no content->endtime
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = null;
        $this->assertTrue($content->isInTime($now));

        // Check ContentManager::isInTime with content->starttime and content->endtime defined
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertTrue($content->isInTime($now));

        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = '2012-08-24 03:03:12';
        $this->assertFalse($content->isInTime($now));

        $content->starttime = '2012-08-20 03:03:12';
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertFalse($content->isInTime($now));

        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-20 03:03:12';
        $this->assertFalse($content->isInTime($now));

        // Check ContentManager::isInTime with content->starttime and content->endtime are equals -> is in time
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-21 03:03:12';
        $this->assertFalse($content->isInTime($now));

        $content->starttime = '2012-08-22 03:03:12';
        $content->endtime   = '2012-08-22 03:03:12';
        $this->assertFalse($content->isInTime($now));

        $content->starttime = '2012-08-23 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';
        $this->assertFalse($content->isInTime($now));
    }

    /**
     * @covers Content::isSuggested
     */
    public function testIsSuggested()
    {
        $content            = new \Content();
        $content->frontpage = 1;
        $this->assertTrue($content->isSuggested());

        $content->frontpage = 0;
        $this->assertFalse($content->isSuggested());

    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeName()
    {
        $content               = new \Content();
        $content->content_type = 1;

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals('article', $contentTypeName);
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeNameWithEmptyContentType()
    {
        $content               = new \Content();
        $content->content_type = '';

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals(false, $contentTypeName);
    }

    /**
     * @covers Content::getContentTypeName
     */
    public function testGetContentTypeNameWithNotValidContentType()
    {
        $content               = new \Content();
        $content->content_type = -1;

        $contentTypeName = $content->getContentTypeName();

        $this->assertEquals(false, $contentTypeName);
    }

    /**
     * @covers Content::isReadyForPublish
     */
    public function testIsReadyForPublish()
    {
        $content = new \Content();

        // Content in time, available and not in litter
        $content->starttime      = '2012-08-21 03:03:12';
        $content->endtime        = '';
        $content->content_status = 1;
        $content->in_litter      = 0;
        $this->assertTrue($content->isReadyForPublish());

        // Content not available
        $content->starttime      = '2052-08-21 03:03:12';
        $content->endtime        = '';
        $content->content_status = 0;
        $content->in_litter      = 0;
        $this->assertFalse($content->isReadyForPublish());

        // Content in litter
        $content->starttime      = '2052-08-21 03:03:12';
        $content->endtime        = '';
        $content->content_status = 1;
        $content->in_litter      = 1;
        $this->assertFalse($content->isReadyForPublish());

        // Content available but with an endtime in the past
        $content->starttime      = '';
        $content->endtime        = '1912-08-21 03:03:12';
        $content->content_status = 1;
        $content->in_litter      = 0;
        $this->assertFalse($content->isReadyForPublish());
    }

    /**
     * @covers Content::isOwner()
     */
    public function testIsOwner()
    {
        // Check that the content belongs to publisher 4
        $content = new \Content();
        $content->load([
            'fk_publisher' => 4,
        ]);

        $this->assertTrue($content->isOwner(4));

        // Check that the content belongs to the author 4
        $content = new \Content();
        $content->load([
            'fk_publisher' => 4,
            'fk_author'    => 5,
        ]);

        $this->assertTrue($content->isOwner(5));

        // Check that the content doesnt belong to a unexisting user
        $content = new \Content();
        $content->load([
            'fk_publisher' => 4,
            'fk_author'    => 5,
        ]);

        $this->assertFalse($content->isOwner(40));
    }
}
