<?php
namespace Tests\Framework\Monolog;

use Framework\Monolog\OnmFormatter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-13 at 19:27:26.
 */
class OnmFormatterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * This method check if the OnmFormatter return the correct formant for the
     * logs system
     */
    public function testMonologFormatter()
    {
        $userAgent    = 'el que viendo siendo el que tengo';
        $ip           = '10.1.0.60';
        $url          = '/unittestFormatter';
        $instanceName = 'formatterTest';
        $header       = ['User-Agent' => $userAgent];

        //test without instance defined and request not defined

        //Create a request stack
        $requestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
            ->setMethods([ 'getCurrentRequest'])
            ->getMock();
        $requestStack->expects($this->once())
            ->method('getCurrentRequest')
            ->will($this->returnValue(null));

        // Create a empty loader
        $loader = $this->getMockBuilder('loader')
            ->setMethods([ 'getInstance'])
            ->getMock();
        $loader->expects($this->any())
            ->method('getInstance')
            ->will($this->returnValue(null));

        $onmFormatter = new OnmFormatter($requestStack, $loader);
        $this->assertSame($onmFormatter->processRecord([]), ['extra' => ['instance' => 'unknown']]);

        //test without instance defined and request defined

        //Create a request
        $request = $this->getMockBuilder('request')
            ->setMethods([ 'getClientIp', 'getUri'])
            ->getMock();
        $request->expects($this->once())
            ->method('getClientIp')
            ->will($this->returnValue($ip));

        $request->expects($this->once())
            ->method('getUri')
            ->will($this->returnValue($url));

        $headerObj = $this->getMockBuilder('header')
            ->setMethods([ 'get'])
            ->getMock();

        $request->headers = $headerObj;

        array_map(function ($headerKey) use ($header, $headerObj) {
            $headerObj->expects($this->once())
                ->method('get')
                ->with($headerKey)
                ->will($this->returnValue($header[$headerKey]));
        }, array_keys(['User-Agent' => $userAgent]));

        //Create a request stack
        $requestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
            ->setMethods([ 'getCurrentRequest'])
            ->getMock();
        $requestStack->expects($this->once())
            ->method('getCurrentRequest')
            ->will($this->returnValue($request));

        // Create a empty loader
        $loader = $this->getMockBuilder('loader')
            ->setMethods([ 'getInstance'])
            ->getMock();
        $loader->expects($this->any())
            ->method('getInstance')
            ->will($this->returnValue(null));

        $onmFormatter = new OnmFormatter($requestStack, $loader);
        $this->assertSame(
            $onmFormatter->processRecord([]),
            ['extra' => ['instance' => 'unknown', 'client_ip' => $ip, 'user-agent' => $userAgent, 'url' => $url]]
        );

        //test with instance defined and request not defined

        //Create a request stack
        $requestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
            ->setMethods([ 'getCurrentRequest'])
            ->getMock();
        $requestStack->expects($this->once())
            ->method('getCurrentRequest')
            ->will($this->returnValue(null));

        //create a loader with instance
        $instance                = $this->getMockBuilder('instance')->getMock();
        $instance->internal_name = $instanceName;

        $loader = $this->getMockBuilder('loader')
            ->setMethods([ 'getInstance'])
            ->getMock();
        $loader->expects($this->any())
            ->method('getInstance')
            ->will($this->returnValue($instance));

        $onmFormatter = new OnmFormatter($requestStack, $loader);
        $this->assertSame(
            $onmFormatter->processRecord([]),
            ['extra' => ['instance' => $instanceName]]
        );

        //test with instance defined and request defined

        //Create a request
        $request = $this->getMockBuilder('request')
            ->setMethods([ 'getClientIp', 'getUri'])
            ->getMock();
        $request->expects($this->once())
            ->method('getClientIp')
            ->will($this->returnValue($ip));

        $request->expects($this->once())
            ->method('getUri')
            ->will($this->returnValue($url));

        $headerObj = $this->getMockBuilder('header')
            ->setMethods([ 'get'])
            ->getMock();

        $request->headers = $headerObj;

        array_map(function ($headerKey) use ($header, $headerObj) {
            $headerObj->expects($this->once())
                ->method('get')
                ->with($headerKey)
                ->will($this->returnValue($header[$headerKey]));
        }, array_keys(['User-Agent' => $userAgent]));

        //Create a request stack
        $requestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
            ->setMethods([ 'getCurrentRequest'])
            ->getMock();
        $requestStack->expects($this->once())
            ->method('getCurrentRequest')
            ->will($this->returnValue($request));

        //create a loader with instance
        $instance                = $this->getMockBuilder('instance')->getMock();
        $instance->internal_name = $instanceName;

        $loader = $this->getMockBuilder('loader')
            ->setMethods([ 'getInstance'])
            ->getMock();
        $loader->expects($this->any())
            ->method('getInstance')
            ->will($this->returnValue($instance));

        $onmFormatter = new OnmFormatter($requestStack, $loader);
        $this->assertSame(
            $onmFormatter->processRecord([]),
            ['extra' => [
                'instance' => $instanceName,
                'client_ip' => $ip,
                'user-agent' => $userAgent,
                'url' => $url
            ]]
        );
    }
}
