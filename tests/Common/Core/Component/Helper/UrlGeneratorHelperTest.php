<?php
namespace Common\Core\Component\Helper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-19 at 14:36:37.
 */
class UrlGeneratorHelperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var UrlGeneratorHelper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->container = $this->getMockBuilder('Container')
            ->setMethods(['get'])->getMock();

        $this->urlGenerator = new UrlGeneratorHelper($this->container);

        $this->article = new \Article();
        $this->article->id = 252;
        $this->article->category_name = 'actualidad';
        $this->article->created = '2015-01-14 23:49:40';
        $this->article->content_type_name = 'article';
        $this->article->slug = 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena';

        // TODO: Do not use constants! Remove it from models when possible
        if (!defined('MEDIA_PATH')) {
            define('MEDIA_PATH', 'media');
        }
        if (!defined('INSTANCE_UNIQUE_NAME')) {
            define('INSTANCE_UNIQUE_NAME', 'opennemas');
        }
        $this->attachment = new \Attachment();
        $this->attachment->content_type_name = 'attachment';
        $this->attachment->id = 252;
        $this->attachment->path = 'route/to/file.name';

        $this->photo = new \Photo();
        $this->photo->content_type_name = 'photo';
        $this->photo->path_file = 'route/to';
        $this->photo->name = 'photo.file.name';

        $this->video = new \Video();
        $this->video->id = 252;
        $this->video->category_name = 'actualidad';
        $this->video->created = '2015-01-14 23:49:40';
        $this->video->content_type_name = 'video';
        $this->video->slug = 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena';

        $this->letter = new \Letter();
        $this->letter->id = 252;
        $this->letter->author = 'My author';
        $this->letter->created = '2015-01-14 23:49:40';
        $this->letter->content_type_name = 'letter';
        $this->letter->slug = 'letter-slug';

        $this->opinionEditorial = new \Opinion();
        $this->opinionEditorial->id = 252;
        $this->opinionEditorial->author = 'My author';
        $this->opinionEditorial->created = '2015-01-14 23:49:40';
        $this->opinionEditorial->content_type_name = 'opinion';
        $this->opinionEditorial->slug = 'opinion-editorial-slug';
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::__construct
     **/
    public function testConstructor()
    {
        $property = new \ReflectionProperty($this->urlGenerator, 'container');
        $property->setAccessible(true);

        $this->assertEquals($this->container, $property->getValue($this->urlGenerator));
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::getConfig
     */
    public function testGetConfig()
    {
        $this->assertArrayHasKey('article', $this->urlGenerator->getConfig());
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::generate
     */
    public function testGenerate()
    {
        // Test relative url generation for article
        $this->assertEquals(
            $this->urlGenerator->generate($this->article),
            '/articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

        // Test absolute url generation for article
        $this->container = $this->getMockBuilder('Container')
            ->setMethods(['get'])->getMock();
        $this->requestStack = $this->getMockBuilder('RequestStack')
            ->setMethods(['getCurrentRequest'])->getMock();
        $this->request = $this->getMockBuilder('Request')
            ->setMethods(['getSchemeAndHttpHost'])->getMock();

        $this->request->expects($this->once())->method('getSchemeAndHttpHost')->willReturn('http://www.example.com');
        $this->requestStack->expects($this->once())->method('getCurrentRequest')->willReturn($this->request);
        $this->container->expects($this->once())->method('get')->with('request_stack')->willReturn($this->requestStack);
        $this->urlGenerator = new UrlGeneratorHelper($this->container);

        $this->assertEquals(
            $this->urlGenerator->generate($this->article, ['absolute' => true]),
            'http://www.example.com/articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::getUriForContent
     */
    public function testGetUriForContent()
    {
        $method = new \ReflectionMethod($this->urlGenerator, 'getUriForContent');
        $method->setAccessible(true);

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [$this->article]),
            'articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

        $this->article->params['bodyLink'] = 'http://www.example.com';
        $return = $method->invokeArgs($this->urlGenerator, [$this->article]);

        $this->assertEquals($return, '/redirect?to=http%3A%2F%2Fwww.example.com');

        // Test relative url generation for attachment
        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [$this->attachment]),
            'media/opennemas/files/route/to/file.name'
        );

        // Test relative url generation for photo
        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [$this->photo ]),
            'media/opennemas/images/route/to/photo.file.name'
        );

        // Test relative url generation for video
        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [$this->video ]),
            'video/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

        // Test relative url generation for letter
        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [$this->letter ]),
            'cartas-al-director/my-author/letter-slug/20150114234940000252.html'
        );
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::generateUriFromConfig
     */
    public function testGenerateUriFromConfig()
    {
        $method = new \ReflectionMethod($this->urlGenerator, 'generateUriFromConfig');
        $method->setAccessible(true);

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, ['article', [
                'id' => sprintf('%06d', 252),
                'category' => 'actualidad',
                'slug' => 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena',
                'date' => date('YmdHis', strtotime('2015-01-14 23:49:40')),
            ]]),
            'articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, ['not-valid', [
                'id' => sprintf('%06d', 252),
                'category' => 'actualidad',
                'slug' => 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena',
                'date' => date('YmdHis', strtotime('2015-01-14 23:49:40')),
            ]]),
            ''
        );

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [null, [
                'id' => sprintf('%06d', 252),
                'category' => 'actualidad',
                'slug' => 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena',
                'date' => date('YmdHis', strtotime('2015-01-14 23:49:40')),
            ]]),
            ''
        );
    }
}
