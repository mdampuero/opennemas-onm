<?php
namespace Common\Core\Component\Helper;

use Common\Data\Core\FilterManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-19 at 14:36:37.
 */
class UrlGeneratorHelperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var UrlGeneratorHelper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->container = $this->getMockBuilder('ServiceContainer')
            ->setMethods([ 'get', 'hasParameter' ])
            ->getMock();

        $this->fm = new FilterManager($this->container);

        $this->instance = $this->getMockBuilder('Instance')
            ->setMethods([ 'hasMultilanguage' ])
            ->getMock();

        $this->kernel = $this->getMockBuilder('Kernel')
            ->setMethods([ 'getContainer' ])
            ->getMock();

        $this->container->expects($this->any())->method('get')
            ->will($this->returnCallback([ $this, 'serviceContainerCallback' ]));
        $this->kernel->expects($this->any())->method('getContainer')
            ->willReturn($this->container);

        $GLOBALS['kernel'] = $this->kernel;

        $this->container = $this->getMockBuilder('Container')
            ->setMethods(['get'])->getMock();

        $this->urlGenerator = new UrlGeneratorHelper($this->container);

        // TODO: Do not use constants! Remove it from models when possible
        if (!defined('MEDIA_PATH')) {
            define('MEDIA_PATH', 'media');
        }

        if (!defined('INSTANCE_UNIQUE_NAME')) {
            define('INSTANCE_UNIQUE_NAME', 'opennemas');
        }
    }

    public function serviceContainerCallback($name)
    {
        if ($name === 'data.manager.filter') {
            return $this->fm;
        }

        if ($name === 'core.instance') {
            return $this->instance;
        }

        return null;
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::__construct
     */
    public function testConstructor()
    {
        $property = new \ReflectionProperty($this->urlGenerator, 'container');
        $property->setAccessible(true);

        $this->assertEquals($this->container, $property->getValue($this->urlGenerator));
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::getConfig
     */
    public function testGetConfig()
    {
        $this->assertArrayHasKey('article', $this->urlGenerator->getConfig());
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::generate
     */
    public function testGenerate()
    {
        // Test relative url generation for article
        $this->assertEquals(
            $this->urlGenerator->generate($this->getFixture('article')),
            '/articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

        // Test absolute url generation for article
        $this->container = $this->getMockBuilder('Container')
            ->setMethods(['get'])->getMock();

        $this->requestStack = $this->getMockBuilder('RequestStack')
            ->setMethods(['getCurrentRequest'])->getMock();

        $this->request = $this->getMockBuilder('Request')
            ->setMethods(['getSchemeAndHttpHost'])->getMock();

        $this->request->expects($this->once())
            ->method('getSchemeAndHttpHost')->willReturn('http://www.example.com');
        $this->requestStack->expects($this->once())
            ->method('getCurrentRequest')->willReturn($this->request);
        $this->container->expects($this->once())
            ->method('get')->with('request_stack')->willReturn($this->requestStack);
        $this->urlGenerator = new UrlGeneratorHelper($this->container);

        $this->assertEquals(
            $this->urlGenerator->generate($this->getFixture('article'), ['absolute' => true]),
            'http://www.example.com/articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena'
            . '/20150114234940000252.html'
        );

    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::getUriForContent
     */
    public function testGetUriForContent()
    {
        $method = new \ReflectionMethod($this->urlGenerator, 'getUriForContent');
        $method->setAccessible(true);

        // Test relative url generation for attachment
        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('attachment') ]),
            'media/opennemas/files/route/to/file.name'
        );

        $article = $this->getFixture('article');

        $article->params['bodyLink'] = 'http://www.example.com';
        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [ $article ]),
            '/redirect?to=http%3A%2F%2Fwww.example.com'
        );

        $article = $this->getFixture('article');
        $this->assertEquals(
            'articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $article ])
        );

        // Test relative url generation for letter
        $this->assertEquals(
            'cartas-al-director/my-author/letter-slug/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('letter') ])
        );

        // Test relative url generation for opinion
        $this->assertEquals(
            'opinion/editorial/opinion-editorial-slug/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('opinionEditorial') ])
        );

        // Test relative url generation for opinion
        $this->assertEquals(
            'opinion/director/opinion-director-slug/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('opinionDirector') ])
        );

        // Test relative url generation for opinion
        $this->assertEquals(
            'opinion/author/opinion-author-slug/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('opinionAuthor') ])
        );

        // Test relative url generation for opinion
        $this->assertEquals(
            'opinion/name/opinion-author-slug/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('opinionAuthorWithAuthor') ])
        );

        // Test relative url generation for opinion
        $this->assertEquals(
            'blog/name/opinion-author-slug/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('opinionAuthorWithAuthorBlog') ])
        );

        // Test relative url generation for photo
        $this->assertEquals(
            'media/opennemas/images/route/to/photo.file.name',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('photo') ])
        );

        // Test relative url generation for video
        $this->assertEquals(
            'video/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html',
            $method->invokeArgs($this->urlGenerator, [ $this->getFixture('video') ])
        );
    }

    /**
     * @covers Common\Core\Component\Helper\UrlGeneratorHelper::generateUriFromConfig
     */
    public function testGenerateUriFromConfig()
    {
        $method = new \ReflectionMethod($this->urlGenerator, 'generateUriFromConfig');
        $method->setAccessible(true);

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, ['article', [
                'id' => sprintf('%06d', 252),
                'category' => 'actualidad',
                'slug' => 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena',
                'date' => date('YmdHis', strtotime('2015-01-14 23:49:40')),
            ]]),
            'articulo/actualidad/alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena/20150114234940000252.html'
        );

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, ['not-valid', [
                'id' => sprintf('%06d', 252),
                'category' => 'actualidad',
                'slug' => 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena',
                'date' => date('YmdHis', strtotime('2015-01-14 23:49:40')),
            ]]),
            ''
        );

        $this->assertEquals(
            $method->invokeArgs($this->urlGenerator, [null, [
                'id' => sprintf('%06d', 252),
                'category' => 'actualidad',
                'slug' => 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena',
                'date' => date('YmdHis', strtotime('2015-01-14 23:49:40')),
            ]]),
            ''
        );
    }

    private function getFixture($name)
    {
        switch ($name) {
            case 'article':
                $content = new \Article();

                $content->id                = 252;
                $content->category_name     = 'actualidad';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'article';
                $content->slug              = 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena';
                break;
            case 'attachment':
                $content = new \Attachment();

                $content->content_type_name = 'attachment';
                $content->id                = 252;
                $content->path              = 'route/to/file.name';
                break;
            case 'photo':
                $content = new \Photo();

                $content->content_type_name = 'photo';
                $content->path_file         = 'route/to';
                $content->name              = 'photo.file.name';
                break;
            case 'video':
                $content = new \Video();

                $content->id                = 252;
                $content->category_name     = 'actualidad';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'video';
                $content->slug              = 'alerta-aeropuerto-roma-amenaza-bomba-vuelo-viena';
                break;
            case 'letter':
                $content = new \Letter();

                $content->id                = 252;
                $content->author            = 'My author';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'letter';
                $content->slug              = 'letter-slug';
                break;
            case 'opinionEditorial':
                $content = new \Opinion();

                $content->id                = 252;
                $content->fk_author         = 0;
                $content->type_opinion      = 1;
                $content->author            = 'My author';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'opinion';
                $content->slug              = 'opinion-editorial-slug';
                break;
            case 'opinionDirector':
                $content = new \Opinion();

                $content->id                = 252;
                $content->fk_author         = 0;
                $content->type_opinion      = 2;
                $content->author            = 'My author';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'opinion';
                $content->slug              = 'opinion-director-slug';
                break;
            case 'opinionAuthor':
                $content = new \Opinion();

                $content->id                = 252;
                $content->fk_author         = 0;
                $content->type_opinion      = 0;
                $content->author            = 'My author';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'opinion';
                $content->slug              = 'opinion-author-slug';
                break;
            case 'opinionAuthorWithAuthor':
                $content = new \Opinion();

                $content->id                = 252;
                $content->fk_author         = 1;
                $content->type_opinion      = 0;
                $content->author            = new \User();
                $content->author->name      = 'Name';
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'opinion';
                $content->slug              = 'opinion-author-slug';
                break;
            case 'opinionAuthorWithAuthorBlog':
                $content = new \Opinion();

                $content->id                = 252;
                $content->fk_author         = 1;
                $content->type_opinion      = 0;
                $content->author            = new \User();
                $content->author->name      = 'Name';
                $content->author->meta      = ['is_blog' => 1];
                $content->created           = '2015-01-14 23:49:40';
                $content->content_type_name = 'opinion';
                $content->slug              = 'opinion-author-slug';
                break;
        }

        return $content;
    }
}
