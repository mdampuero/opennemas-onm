<?xml version="1.0" encoding="UTF-8"?>

<project name="OpenNemas" default="build">

    <property name="toolsdir" value="bin/" />
    <property name="node_modules_bin_dir" value="node_modules/.bin" />
    <property name="node_modules_dir" value="node_modules" />
    <path id="project.paths.php">
        <pathelement path="${basedir}/src/Backend" />
        <pathelement path="${basedir}/src/BackendWebService" />
        <pathelement path="${basedir}/src/Framework" />
        <pathelement path="${basedir}/src/Frontend" />
        <pathelement path="${basedir}/src/FrontendMobile" />
        <pathelement path="${basedir}/src/Manager" />
        <pathelement path="${basedir}/src/ManagerWebService" />
        <pathelement path="${basedir}/src/WebService" />
        <pathelement path="${basedir}/libs/models" />
        <pathelement path="${basedir}/libs/Onm" />
        <pathelement path="${basedir}/libs/core" />
        <!-- Take a look at lint target should be updated -->
    </path>

    <pathconvert pathsep=" " property="project.paths.php.space-separated" refid="project.paths.php"/>
    <pathconvert pathsep="," property="project.paths.php.comma-separated" refid="project.paths.php"/>

    <fileset dir="${basedir}/public" id="project.paths.js">
        <include name="assets/src/**/*.js" />
        <include name="themes/admin/**/*.js" />
        <include name="themes/manager/**/*.js" />
        <exclude name="**/*charts.js" />
        <exclude name="**/*theme-vars.js" />
        <!-- Take a look at lint target should be updated -->
    </fileset>

    <pathconvert pathsep=" " property="project.paths.js.space-separated" refid="project.paths.js"/>
    <pathconvert pathsep="," property="project.paths.js.comma-separated" refid="project.paths.js"/>

    <target name="build" depends="prepare,phplint,eslint,phpunit-ci,tools-parallel"/>

    <target name="build-sequential" depends="prepare,phplint,eslint,karma,phpunit-ci,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd,apidoc-ci,jsdoc-ci" />

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel>
            <antcall target="pdepend"/>
            <antcall target="phpmd-ci"/>
            <antcall target="phploc-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phpcpd"/>
            <antcall target="apidoc-ci"/>
            <antcall target="jsdoc-ci"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/tmp/cache/"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/tmp/cache"/>
        <parallel>
            <antcall target="composer" />
            <antcall target="npm" />
            <antcall target="bower" />
        </parallel>
    </target>

    <target name="composer-check">
        <available file="${basedir}/composer.phar" property="composer.present"/>
    </target>

    <target name="composer-download" unless="composer.present">
        <property name="composer.noselfupdate" value="true"/>
        <get src="https://getcomposer.org/composer.phar" dest="tmp/composer.phar"/>
    </target>

    <target name="composer-selfupdate" unless="composer.noselfupdate">
        <exec executable="php">
            <arg value="${builddir}/composer.phar"/>
            <arg value="self-update"/>
            <arg value="--quiet"/>
        </exec>
    </target>

    <!-- For now I will still with bin/composer.phar until the composer-check,downlaod,self-update is on master branch -->
    <target name="composer" depends="composer-check,composer-download,composer-selfupdate" unless="composer.noupdate" description="Installing composer dependencies">
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/bin/composer.phar" />
            <arg value="install" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />

            <env key="SYMFONY_ENV" value="prod"/>
        </exec>
    </target>

    <target name="npm" description="Installing npm dependencies">
        <exec executable="npm" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="bower" description="Installing bower dependencies">
        <exec executable="${node_modules_bin_dir}/bower" failonerror="true">
            <arg value="install" />
            <arg value="--allow-root"/>
        </exec>
    </target>

    <target name="phplint" description="Checks php files for Syntax errors">
        <exec executable="sh" failonerror="true">
            <arg value="-c" />
            <arg value="find ${project.paths.php.space-separated} -name *.php -print0 | xargs -0 -n1 -P0 php -l"/>
        </exec>
    </target>

    <target name="phploc-ci" description="Measure project size using PHPLOC">
        <exec executable="${toolsdir}/phploc" failonerror="true">
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg line="${project.paths.php.space-separated}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${toolsdir}/pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="${project.paths.php.comma-separated}" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD">
        <exec executable="${toolsdir}/phpmd">
            <arg line="${project.paths.php.comma-separated}" />
            <arg value="xml" />
            <arg value="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer">
        <exec executable="${toolsdir}/phpcs">
            <arg line="-n" />
            <arg value="--standard=PSR2" />
            <arg line="--extensions=php" />
            <arg line="${project.paths.php.space-separated}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer">
        <exec executable="${toolsdir}/phpcs" output="${basedir}/build/logs/checkstyle.xml">
            <arg line="-n" />
            <arg line="--report=checkstyle" />
            <arg value="--standard=PSR2" />
            <arg line="--extensions=php" />
            <arg line="${project.paths.php.space-separated}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicated code using PHPCPD">
        <exec executable="${toolsdir}/phpcpd">
            <arg line="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg line="${project.paths.php.space-separated}" />
        </exec>
    </target>

    <target name="phpunit-ci" description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}/phpunit" failonerror="true">
            <arg line="-c" />
            <arg value="${basedir}/phpunit.xml" />
            <arg line="--coverage-html" />
            <arg value="${basedir}/build/coverage" />
            <!-- <arg line="\-\-coverage-xml" /> -->
            <!-- <arg value="${basedir}/build/logs/coverage/xml" /> -->
            <arg line="--coverage-clover" />
            <arg value="${basedir}/build/logs/clover.xml" />

            <arg line="--log-junit" />
            <arg value="${basedir}/build/logs/junit.xml" />
        </exec>
    </target>

    <target name="karma" description="Run karma test suites">
        <exec executable="${node_modules_bin_dir}/karma" failonerror="false">
            <arg value="start" />
        </exec>
    </target>

    <target name="eslint" description="Check style in JS files">
        <exec executable="${node_modules_bin_dir}/eslint" failonerror="false" output="${basedir}/build/eslint.xml">
            <arg line="-c" />
            <arg value="${basedir}/.eslintrc" />
            <arg line="--format=checkstyle" />
            <arg line="${project.paths.js.space-separated}" />
        </exec>
    </target>

    <target name="apidoc-ci" description="Generate API REST documentation">
        <exec executable="${node_modules_bin_dir}/apidoc" failonerror="false">
            <arg value="-i" />
            <arg value="${basedir}/src" />
            <arg value="-t" />
            <arg value="${basedir}/${node_modules_dir}/apidoc/template" />
            <arg value="-o" />
            <arg value="${basedir}/build/docs/php/web-service" />
        </exec>
    </target>

    <target name="jsdoc-ci" description="Generate AngularJS documentation">
        <exec executable="${node_modules_bin_dir}/jsdoc" failonerror="false">
            <arg line="-c" />
            <arg value="${node_modules_dir}/openhost-jsdoc/conf.json" />
            <arg line="-t" />
            <arg line="${node_modules_dir}/openhost-jsdoc/template" />
            <arg line="-r" />
            <arg line="${project.paths.js.space-separated}" />
            <arg line="-d" />
            <arg line="${basedir}/build/docs/javascript" />
        </exec>
    </target>

</project>
