security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        User:
            id: core.security.encoder.password
        Common\ORM\Entity\User:
            id: core.security.encoder.password

    role_hierarchy:
        ROLE_MASTER:   [ ROLE_MANAGER, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_MANAGER:  [ ROLE_BACKEND ]
        ROLE_BACKEND:  [ ROLE_FRONTEND ]
        ROLE_FRONTEND: []

    providers:
        chain_provider:
            chain:
                providers: [ backend, manager_ws ]
        backend:
            id: core.security.user.provider
        manager_ws:
            id: manager_ws.security.user.provider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt|error))/
            security: false

        assets:
            pattern:  ^/(css|images|js|dynamic|asset)/
            security: false

        oauth:
            pattern:  ^/oauth/connect
            security: false

        manager:
            pattern:  ^/manager$
            security: false

        manager_ws_fake_login:
            pattern:  ^/managerws/fake-login
            security: false

        manager_ws_login_tpl:
            pattern: ^/managerws/template/login:(fake_form|blank).tpl$
            security: false

        manager_ws_instances:
            pattern: ^/managerws/instances/(checkinstancename|checkmailinuse|create)
            security: false

        frontend_login:
            pattern:  ^/login$
            security: false

        backend_recover:
            pattern:  ^/admin/password/*
            security: false

        frontend_recover:
            pattern:  ^/user/(recover*|register|(activate/*))
            security: false

        framework:
            pattern:  ^/framework
            security: false

        manager_ws_login:
            pattern:  ^/managerws/(login|check)
            stateless: true
            anonymous: true
            form_login:
                check_path: /managerws/check
                require_previous_session: false
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: chain_provider

        manager_ws:
            pattern:   ^/managerws
            stateless: true
            lexik_jwt:
                authorization_header:
                    enabled: true
                    prefix:  Bearer
                query_parameter:      # check token in query string parameter
                    enabled: true
                    name:    token

        opennemas:
            pattern:    ^/*
            anonymous:  ~
            form_login:
                login_path:                     frontend_authentication_login
                check_path:                     core_authentication_check
                target_path_parameter:          _target
                always_use_default_target_path: false
                use_referer:                    false
                failure_handler:                core.security.authentication.failure
                success_handler:                core.security.authentication.success
            logout:
                invalidate_session: true
                path:               core_authentication_logout
                success_handler:    core.security.http.logout.failure
                delete_cookies:
                    __onm_sess: { path: null, domain: null }
                    __onm_user: { path: null, domain: null }
            oauth:
                resource_owners:
                    facebook: "/oauth/login/check-facebook"
                    twitter:  "/oauth/login/check-twitter"
                login_path:          frontend_authentication_login
                default_target_path: frontend_authentication_login
                check_path:          core_authentication_check
                use_forward:         false
                failure_path:        core_authentication_complete
                success_handler:     core.security.authentication.oauth.success
                oauth_user_provider:
                    service: core.security.user.oauth_provider

    access_control:
        - { path: ^/(admin|auth)/(login$|connect), roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/admin/*,                       roles: [ ROLE_BACKEND ] }
        - { path: ^/api/v1/backend/*,              roles: [ ROLE_BACKEND ] }
        - { path: ^/managerws/(login|check),       roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/managerws,                     roles: [ ROLE_MANAGER ] }
        - { path: ^/*,                             roles: [ IS_AUTHENTICATED_ANONYMOUSLY, IS_AUTHENTICATED_FULLY ] }
