<?php
namespace Onm;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-13 at 19:27:26.
 */
class DatabaseConnectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->validConfig = array(
            'dbal' => array(
                'connections'        => array(
                    'test' => array(
                        'dbname' => 'database-name'
                    )
                ),
                'default_connection' => 'test',
                'charset' => 'UTF8'
            ),
        );

        $this->validConfigWithSlaves = array(
            'dbal' => array(
                'connections'        => array(
                    'test' => array(
                        'dbname' => 'database-name',
                        'slaves' => array(
                            'slave1' => array()
                        )
                    ),
                ),
                'default_connection' => 'test',
            ),
        );

        $this->validConfigWithSlavesAndCharset = array_merge(
            array(
                'dbal' => array(
                    'charset' => 'UTF8'
                ),
            ),
            $this->validConfigWithSlaves
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Onm\DatabaseConnection::__construct
     * @expectedException \Exception
     */
    public function testConstructWithInvalidParams()
    {
        $dbConn = new \Onm\DatabaseConnection(
            true
        );

        $dbConn = new \Onm\DatabaseConnection(
            array(
                'dbal' => array(
                    'connections'        => 'Dummy theme',
                )
            )
        );

        $dbConn = new \Onm\DatabaseConnection(
            array(
                'dbal' => array(
                    'connections'        => array(
                        'test' => array()
                    ),
                    'default_connection' => 'test'
                )
            )
        );

        $dbConn = new \Onm\DatabaseConnection(
            array(
                'dbal' => array(
                    'connections'        => array(
                        'test' => array()
                    ),
                    'default_connection' => 'not_valid_connection_name'
                )
            )
        );
    }

    /**
     * @covers Onm\DatabaseConnection::__construct
     * @covers Onm\DatabaseConnection::getCurrentDatabaseParams
     */
    public function testConstructWithValidParams()
    {
        $dbConn = new \Onm\DatabaseConnection($this->validConfigWithSlaves);

        $this->assertTrue(is_array($dbConn->getCurrentDatabaseParams()));

        $connectionParams = $dbConn->getCurrentDatabaseParams();

        // Returns the validConfigWithSlaves adding charset UTF8
        $this->assertEquals(
            array_merge(
                $this->validConfigWithSlavesAndCharset['dbal']['connections'][$this->validConfigWithSlavesAndCharset['dbal']['default_connection']],
                array('charset' => 'UTF8')
            ),
            $connectionParams
        );
    }


    /**
     * @covers Onm\DatabaseConnection::isConfigurationValid
     **/
    public function testIsconfigurationValid()
    {
        $dbConn = new \Onm\DatabaseConnection($this->validConfig);

        $this->assertFalse($dbConn->isConfigurationValid(true));

        $this->assertFalse(
            $dbConn->isConfigurationValid(
                array(
                    'dbal' => array(
                        'connections'        => array(
                            'test' => array()
                        ),
                        'default_connection' => 'not_valid_connection_name'
                    )
                )
            )
        );

        $this->assertTrue(
            $dbConn->isConfigurationValid(
                array(
                    'dbal' => array(
                        'connections'        => array(
                            'test' => array()
                        ),
                        'default_connection' => 'test'
                    )
                )
            )
        );
    }

    /**
     * @covers Onm\DatabaseConnection::configHasSlaves
     **/
    public function testConfigHasSlaves()
    {
        $dbConn = new \Onm\DatabaseConnection($this->validConfig);
        $this->assertFalse($dbConn->configHasSlaves());

        $dbConn = new \Onm\DatabaseConnection($this->validConfigWithSlaves);
        $this->assertTrue($dbConn->configHasSlaves());
    }

    /**
     * @covers Onm\DatabaseConnection::selectDatabase
     * @covers Onm\DatabaseConnection::replaceKeyInArray
     **/
    public function testSelectDatabase()
    {
        $newDatabaseName = 'new-database-name';
        $dbConn = new \Onm\DatabaseConnection($this->validConfigWithSlavesAndCharset);
        $dbConn->selectDatabase($newDatabaseName);

        $connectionParams = $dbConn->getCurrentDatabaseParams();

        $this->assertEquals($connectionParams['dbname'], $newDatabaseName);
    }

    /**
     * @covers Onm\DatabaseConnection::resetConnections
     **/
    public function testResetConnections()
    {
        $dbConn = new \Onm\DatabaseConnection($this->validConfig);
        $dbConn->resetconnections();

        $this->assertEquals($dbConn->masterConnection, null);
        $this->assertEquals($dbConn->slaveConnections, array());
    }

    /**
     * @covers Onm\DatabaseConnection::isReadOnlyAction
     **/
    public function testIsReadOnlyAction()
    {
        $dbConn = new \Onm\DatabaseConnection($this->validConfig);

        $this->assertTrue($dbConn->isReadOnlyAction('Execute', array('SELECT * FROM contents')));
        $this->assertTrue($dbConn->isReadOnlyAction('GetOne', array('SELECT * FROM contents')));
        $this->assertFalse($dbConn->isReadOnlyAction('Execute', array('UPDATE * FROM contents')));
        $this->assertFalse($dbConn->isReadOnlyAction('Execute', array('INSERT * FROM contents')));
        $this->assertTrue($dbConn->isReadOnlyAction('StartTrans', array('SELECT * FROM contents')));
    }
}
