<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-31 at 02:56:38.
 */
class ContentTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Content
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Content;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Content::__get
     */
    public function testMagickPropertyUri()
    {
        // $mock = $this->getMock('Content', array('getUri'));

        // // Set up the expectation for the update() method
        // // to be called only once and with the string ‘something’
        // // as its parameter.
        // $mock->expects($this->atLeastOnce())
        //     ->method('getUri')
        //     ->with($this->returnValue('foo'));

        // // Calling $stub->doSomething() will now return
        // // 'foo'.
        // $this->assertEquals('foo', $mock->uri);

        // $this->object->category_name = 'category';
        // $this->object->slug2 = 'slug-for-this-content';
        // $this->object->content_type_name = 'article';
        // $this->object->id = '00001';

        // $this->assertEquals('articulo/category/slug-for-this-content/19700101010000000001.html', $this->object->uri);
    }

    // /**
    //  * @covers Content::getUri
    //  * @todo   Implement testGetUri().
    //  */
    // public function testGetUri()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::getContentTypeName
    //  * @todo   Implement testGetContentTypeName().
    //  */
    // public function testGetContentTypeName()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::create
    //  * @todo   Implement testCreate().
    //  */
    // public function testCreate()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::read
    //  * @todo   Implement testRead().
    //  */
    // public function testRead()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::update
    //  * @todo   Implement testUpdate().
    //  */
    // public function testUpdate()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::remove
    //  * @todo   Implement testRemove().
    //  */
    // public function testRemove()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::delete
    //  * @todo   Implement testDelete().
    //  */
    // public function testDelete()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::no_delete
    //  * @todo   Implement testNo_delete().
    //  */
    // public function testNo_delete()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::toggleAvailable
    //  * @todo   Implement testToggleAvailable().
    //  */
    // public function testToggleAvailable()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::toggleSuggested
    //  * @todo   Implement testToggleSuggested().
    //  */
    // public function testToggleSuggested()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_available
    //  * @todo   Implement testSet_available().
    //  */
    // public function testSet_available()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::getStatus
    //  * @todo   Implement testGetStatus().
    //  */
    // public function testGetStatus()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::getQuickInfo
    //  * @todo   Implement testGetQuickInfo().
    //  */
    // public function testGetQuickInfo()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::setAvailable
    //  * @todo   Implement testSetAvailable().
    //  */
    // public function testSetAvailable()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::setDraft
    //  * @todo   Implement testSetDraft().
    //  */
    // public function testSetDraft()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::setTrashed
    //  * @todo   Implement testSetTrashed().
    //  */
    // public function testSetTrashed()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::setFavorited
    //  * @todo   Implement testSetFavorited().
    //  */
    // public function testSetFavorited()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::setArchived
    //  * @todo   Implement testSetArchived().
    //  */
    // public function testSetArchived()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::suggestToHomepage
    //  * @todo   Implement testSuggestToHomepage().
    //  */
    // public function testSuggestToHomepage()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::loadCategoryName
    //  * @todo   Implement testLoadCategoryName().
    //  */
    // public function testLoadCategoryName()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::loadCategoryTitle
    //  * @todo   Implement testLoadCategoryTitle().
    //  */
    // public function testLoadCategoryTitle()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::load
    //  * @todo   Implement testLoad().
    //  */
    // public function testLoad()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-22 03:03:12';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, Content::DUED);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithInTimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, Content::IN_TIME);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, Content::POSTPONED);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithPostponedAndNotEndtimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, Content::POSTPONED);
    }

    /**
     * @covers Content::getSchedulingState
     */
    public function testGetSchedulingStateWithNotScheduledContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->getSchedulingState($now);

        $this->assertEquals($result, Content::NOT_SCHEDULED);
    }

    /**
     * @covers Content::isScheduled
     *
     *   starttime   actual
     * ------(----------|----------
     */
    public function testIsScheduledWithNotScheduledContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isScheduled($now);

        $this->assertFalse($result);
    }


    /**
     * @covers Content::isScheduled
     *
     *    actual
     *   starttime
     * ------(--------------------
     */
    public function testIsScheduledWithStartAndActualTimesEquals()
    {
        $content = new \Content();

        $now                = '2012-08-21 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isScheduled($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isScheduled
     *
     *   starttime    actual
     * ------(----------|----------
     */
    public function testIsScheduledWithInTimeScheduledContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-24 03:03:12';

        $result = $content->isScheduled($now);

        $this->assertTrue($result);
    }


    /**
     * @covers Content::isScheduled
     *
     *   starttime    actual
     * ------(----------|----------
     */
    public function testIsScheduledWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-19 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isScheduled($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isStarted
     */
    public function testIsStartedWithInTimecontentContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isStarted($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isStarted
     */
    public function testIsStartedWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-19 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isStarted($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isInTime
     */
    public function testIsStartedWithDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-22 03:03:12';

        $result = $content->isStarted($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isPostponed
     */
    public function testIsPostponedWithInTimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isPostponed($now);

        $this->assertFalse($result);
    }

        /**
     * @covers Content::isPostponed
     */
    public function testIsPostponedWithPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '0000-00-00 00:00:00';

        $result = $content->isPostponed($now);

        $this->assertTrue($result);
    }

    /**
     * @covers Content::isPostponed
     */
    public function testIsPostponedWithDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-24 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isPostponed($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInTimeContent()
    {
        $content = new \Content();

        $now                = '2012-08-22 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInPostponedContent()
    {
        $content = new \Content();

        $now                = '2012-08-20 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertFalse($result);
    }

    /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInDuedContent()
    {
        $content = new \Content();

        $now                = '2012-08-24 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertTrue($result);
    }

        /**
     * @covers Content::isDued
     */
    public function testIsDuedWithInNowAndEntTimeEqualsContent()
    {
        $content = new \Content();

        $now                = '2012-08-23 03:03:12';
        $content->starttime = '2012-08-21 03:03:12';
        $content->endtime   = '2012-08-23 03:03:12';

        $result = $content->isDued($now);

        $this->assertFalse($result);
    }

    // /**
    //  * @covers Content::isInTime2
    //  * @todo   Implement testIsInTime2().
    //  */
    // public function testIsInTime2()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::isStarted
    //  * @todo   Implement testIsStarted().
    //  */
    // public function testIsStarted()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::isPostponed
    //  * @todo   Implement testIsPostponed().
    //  */
    // public function testIsPostponed()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::isDued
    //  * @todo   Implement testIsDued().
    //  */
    // public function testIsDued()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_status
    //  * @todo   Implement testSet_status().
    //  */
    // public function testSet_status()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::isSuggested
    //  * @todo   Implement testIsSuggested().
    //  */
    // public function testIsSuggested()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_frontpage
    //  * @todo   Implement testSet_frontpage().
    //  */
    // public function testSet_frontpage()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_inhome
    //  * @todo   Implement testSet_inhome().
    //  */
    // public function testSet_inhome()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_home_position
    //  * @todo   Implement testSet_home_position().
    //  */
    // public function testSet_home_position()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::getContentTypes
    //  * @todo   Implement testGetContentTypes().
    //  */
    // public function testGetContentTypes()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::getIdContentType
    //  * @todo   Implement testGetIdContentType().
    //  */
    // public function testGetIdContentType()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::setNumViews
    //  * @todo   Implement testSetNumViews().
    //  */
    // public function testSetNumViews()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::pkExists
    //  * @todo   Implement testPkExists().
    //  */
    // public function testPkExists()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::get
    //  * @todo   Implement testGet().
    //  */
    // public function testGet()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::onUpdateClearCacheContent
    //  * @todo   Implement testOnUpdateClearCacheContent().
    //  */
    // public function testOnUpdateClearCacheContent()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::refreshFrontpage
    //  * @todo   Implement testRefreshFrontpage().
    //  */
    // public function testRefreshFrontpage()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::refreshFrontpageForAllCategories
    //  * @todo   Implement testRefreshFrontpageForAllCategories().
    //  */
    // public function testRefreshFrontpageForAllCategories()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::refreshHome
    //  * @todo   Implement testRefreshHome().
    //  */
    // public function testRefreshHome()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::dropFromHomePageOfCategory
    //  * @todo   Implement testDropFromHomePageOfCategory().
    //  */
    // public function testDropFromHomePageOfCategory()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::dropFromAllHomePages
    //  * @todo   Implement testDropFromAllHomePages().
    //  */
    // public function testDropFromAllHomePages()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_position
    //  * @todo   Implement testSet_position().
    //  */
    // public function testSet_position()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::set_favorite
    //  * @todo   Implement testSet_favorite().
    //  */
    // public function testSet_favorite()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::searchContentID
    //  * @todo   Implement testSearchContentID().
    //  */
    // public function testSearchContentID()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::searchInRefactorID
    //  * @todo   Implement testSearchInRefactorID().
    //  */
    // public function testSearchInRefactorID()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::resolveID
    //  * @todo   Implement testResolveID().
    //  */
    // public function testResolveID()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::findByUrn
    //  * @todo   Implement testFindByUrn().
    //  */
    // public function testFindByUrn()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::isReadyForPublish
    //  * @todo   Implement testIsReadyForPublish().
    //  */
    // public function testIsReadyForPublish()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::loadRelatedContents
    //  * @todo   Implement testLoadRelatedContents().
    //  */
    // public function testLoadRelatedContents()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::loadFrontpageImageFromHydratedArray
    //  * @todo   Implement testLoadFrontpageImageFromHydratedArray().
    //  */
    // public function testLoadFrontpageImageFromHydratedArray()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }

    // /**
    //  * @covers Content::loadAttachedVideo
    //  * @todo   Implement testLoadAttachedVideo().
    //  */
    // public function testLoadAttachedVideo()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }
}

