<?php

/*
 * This file is part of the onm package.
 * (c) 2009-2011 OpenHost S.L. <contact@openhost.es>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 **/
/**
 * Handles all the CRUD actions over widgets.
 *
 * @package    Onm
 * @subpackage Model
 * @author     Fran Dieguez <fran@openhost.es>
 *
 **/

class Widget extends Content
{
    public $pk_widget = null;
    public $content = null;
    public $renderlet = null;
    public $tpl_timestamp = null;

    /**
     * @var MethodCacheManager Handler to call method cached
     */
    public $cache = null;

    /**
     * constructor
     *
     * @param int $id
     */
    public function __construct($id = null)
    {

        parent::__construct($id);

        if (!is_null($id)) {
            $this->read($id);
        }
        $this->cache = new MethodCacheManager($this, array('ttl' => 30));
        $this->content_type = __CLASS__;
    }

    /**
     * Magic method for autogenerated class properties
     *
     * @return string
     **/
    public function __get($name)
    {
        switch($name) {
            case 'content_type_name':
                return 'Widget';
                break;

            default:
                break;
        }

        return parent::__get($name);
    }
    public function create($data)
    {
        // Clear  magic_quotes
        String_Utils::disabled_magic_quotes($data);
        $data['category'] = 0;

        // Start transaction
        $GLOBALS['application']->conn->BeginTrans();
        parent::create($data);
        $sql = 'INSERT INTO widgets (`pk_widget`, `content`, `renderlet`)
                VALUES (?, ?, ?)';

        if ($data['renderlet'] != 'html' && $data['renderlet'] != 'smarty') {
            $data['content'] = strip_tags($data['content']);
        }

        // Sort values
        $values = array($this->id, $data['content'], $data['renderlet']);

        if ($GLOBALS['application']->conn->Execute($sql, $values) === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            $GLOBALS['application']->conn->RollbackTrans();
            return false;
        }

        // Commit transaction
        $GLOBALS['application']->conn->CommitTrans();
        return true;
    }
    /**
     * Read, get a specific object
     *
     * @param int $id Object ID
     * @return Widget Return instance to chaining method
     */
    public function read($id)
    {

        parent::read($id);
        $this->id = $id;
        $sql = "SELECT * FROM `widgets` WHERE `pk_widget`=?";
        $values = array($id);
        $rs = $GLOBALS['application']->conn->Execute($sql, $values);

        if ($rs === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            return null;
        }
        $this->load($rs->fields);
    }
    /**
     * Read, get a specific object
     *
     * @param int $id Object ID
     * @return Widget Return instance to chaining method
     */
    public function readIntelligentFromName($content)
    {

        $sqlSearchWidget = "SELECT * FROM `widgets` WHERE `content`=?";
        $rs = $GLOBALS['application']->conn->Execute(
            $sqlSearchWidget, $content
        );

        if ($rs === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            return null;
        }
        $id = $rs->fields['pk_widget'];
        parent::read($id);
        $this->id = array($id);
        $sql = "SELECT * FROM `widgets` WHERE `pk_widget`=?";
        $values = array($id);
        $rs = $GLOBALS['application']->conn->Execute($sql, $values);

        if ($rs === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            return null;
        }
        $this->load($rs->fields);
        $this->id = array($id);
    }
    /**
     * Load properties into this instance
     *
     * @param array $properties Array properties
     */
    public function load($properties)
    {


        if (is_array($properties)) {
            foreach ($properties as $k => $v) {

                if (!is_numeric($k)) {
                    $this->{$k} = $v;
                }
            }
        } elseif (is_object($properties)) {
            $properties = get_object_vars($properties);
            foreach ($properties as $k => $v) {

                if (!is_numeric($k)) {
                    $this->{$k} = $v;
                }
            }
        }
        $this->id = $this->pk_widget;
    }
    /**
     * Update
     *
     * @param array $data Array values
     * @return boolean
     */
    public function update($data)
    {
        // Clear  magic_quotes
        String_Utils::disabled_magic_quotes($data);
        $data['category'] = 0;

        // Start transaction
        $GLOBALS['application']->conn->BeginTrans();
        parent::update($data);
        $sql = "UPDATE `widgets`
                SET `content`=?, `renderlet`=? WHERE `pk_widget`=?";

        if ($data['renderlet'] != 'html'  && $data['renderlet'] != 'smarty') {
            $data['content'] = strip_tags($data['content']);
        }
        $values = array($data['content'], $data['renderlet'], $data['id']);

        if ($GLOBALS['application']->conn->Execute($sql, $values) === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            $GLOBALS['application']->conn->RollbackTrans();
            return false;
        }

        // Commit transaction
        $GLOBALS['application']->conn->CommitTrans();
        return true;
    }
    /**
     * @deprecated
     */
    public function setPlaceholder($placeholder, $id)
    {
        // Insert placeholder manually
        $sql = 'UPDATE `contents` SET `placeholder`=? WHERE pk_content=?';
        $values = array($placeholder, $id);

        if ($GLOBALS['application']->conn->Execute($sql, $values) === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            return false;
        }
        return true;
    }

    public static function getAllInteligentWidgets()
    {
        $path = realpath(TEMPLATE_USER_PATH . '/tpl' . '/widgets') . '/';
        $allWidgets = array();

        if(is_dir($path)){
            $objects = scandir($path);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (preg_match('@^widget_(.)*\.tpl$@', $object)) {
                        $objectWords = explode('_', substr($object, 7, -10));
                        $name = '';
                        foreach ($objectWords as $word) {
                            $name .= ucfirst($word);
                        }

                        $allWidgets[] .=  $name;
                    }
                }
            }
        }
        return $allWidgets;
    }


    /**
     * Delete
     *
     * @param int $id Identifier
     * @return boolean
     */
    public function remove($id, $editor = null)
    {

        $sql = "DELETE FROM `widgets` WHERE `pk_widget`=?";
        parent::remove($id); // Delete from database, don't use trash

        $values = array($id);

        if ($GLOBALS['application']->conn->Execute($sql, $values) === false) {
            $errorMsg = $GLOBALS['application']->conn->ErrorMsg();
            $GLOBALS['application']->logger->debug('Error: ' . $errorMsg);
            $GLOBALS['application']->errors[] = 'Error: ' . $errorMsg;
            return false;
        }
        return true;
    }
    public function put_permalink($end, $type, $title, $cat)
    {

        return '';
    }
    public function render()
    {

        $method = '_renderlet_' . $this->renderlet;

        //call_user_func_array(array($this, $method), array($smarty));
        return "<div class=\"widget\">" . $this->$method() . "</div>";
    }
    private function _renderlet_html()
    {

        return $this->content;
    }
    private function _renderlet_php()
    {

        ob_start();
        eval($this->content);
        $output = ob_get_contents();
        ob_end_clean();
        return $output;
    }
    /**
     *
     * SEE resource.string.php Smarty plugin
     * SEE resource.widget.php Smarty plugin
     */
    private function _renderlet_smarty()
    {


        // Deprecated
        //$resource = 'string:' . $this->content;

        Template::$registry['widget'][$this->pk_widget] = $this->content;
        $resource = 'string:' . $this->content;
        $wgtTpl = new Template(TEMPLATE_USER);

        // no caching
        $wgtTpl->caching = 0;
        $wgtTpl->force_compile = true;
        $output = $wgtTpl->fetch($resource);
        return $output;
    }
    private function _renderlet_intelligentwidget()
    {

        $output = "Not implemented";
        $path = realpath(TEMPLATE_USER_PATH . '/tpl' . '/widgets') . '/';
        ini_set('include_path', get_include_path() . PATH_SEPARATOR . $path);
        $className = 'Widget' . $this->content;
        $filename = strtolower($className);

        if (file_exists($path . '/' . $filename . '.class.php')) {
            require_once $path . '/' . $filename . '.class.php';
        } else {
            $filename = strtolower(
                preg_replace('/([a-z])([A-Z])/', '$1_$2', $className)
            );

            if (file_exists($path . '/' . $filename . '.class.php')) {
                require_once $path . '/' . $filename . '.class.php';
            }
        }
        try {
            $class = new $className;
        }
        catch (Exception $e) {
            return "Widget {$this->content} not available";
        }
        return $class->render();
    }
}
